import bz2
from deuces import Card
from deuces import Evaluator
import itertools
import pickle
import numpy as np
import random

"""
The available actions are:
0. Fold
1. Check/ Exchange
2. Call
3. Raise half pot
4. Raise full pot
5. Bet half pot
6. Bet full pot

The available preflop card buckets are (Preflop_type is a list containing all possible hole cards placed into sub-lists representing preflop buckets):
0. Pocket pairs
1. Suited connectors
2. Unsuited connectors
3. Suited
4. Unsuited close
5. Unsuited far

The available postflop card buckets are:
0. Hand strength 0-.2
1. Hand strength .2-.4
2. Hand strength .4-.6
3. Hand strength .6-.8
4. Hand strength .8-.1
"""

suits = ['c', 'd', 'h', 's']
counts = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
deck = []
for i in counts: #Generates all 52 cards in a deck
    for j in suits:
        deck.append(i + j)

filename="bucket_odds" #The file that holds the odds of being dealt a card from a given bucket
file=open(filename, "rb")
odds=pickle.load(file)
file.close()

action_buckets=['0', '1', '2', '3', '4', '5', '6'] #The seven possible game actions to be taken
preflop_buckets=['0', '1', '2', '3', '4', '5'] #The six possible buckets preflop hands can fall into
postflop_buckets=['0', '1', '2', '3', '4'] #The five possible buckets postflop hands can fall into

preflop_bucket_odds=odds[1] #The odds of getting hole cards that fall into a given preflop bucket
postflop_bucket_odds=odds[2] #The odds of getting hole cards and board cards that fall into a given postflop bucket

def generate_random_preflop(n):
    """
    Takes in a list of all preflop card combinations, segmented into their six unique buckets. Returns a list of cards
    with n selected from each category.
    """
    preflop_type=[[('2c', '2d'), ('2c', '2h'), ('2c', '2s'), ('2d', '2h'), ('2d', '2s'), ('2h', '2s'), ('3c', '3d'), ('3c', '3h'), ('3c', '3s'), ('3d', '3h'), ('3d', '3s'), ('3h', '3s'), ('4c', '4d'), ('4c', '4h'), ('4c', '4s'), ('4d', '4h'), ('4d', '4s'), ('4h', '4s'), ('5c', '5d'), ('5c', '5h'), ('5c', '5s'), ('5d', '5h'), ('5d', '5s'), ('5h', '5s'), ('6c', '6d'), ('6c', '6h'), ('6c', '6s'), ('6d', '6h'), ('6d', '6s'), ('6h', '6s'), ('7c', '7d'), ('7c', '7h'), ('7c', '7s'), ('7d', '7h'), ('7d', '7s'), ('7h', '7s'), ('8c', '8d'), ('8c', '8h'), ('8c', '8s'), ('8d', '8h'), ('8d', '8s'), ('8h', '8s'), ('9c', '9d'), ('9c', '9h'), ('9c', '9s'), ('9d', '9h'), ('9d', '9s'), ('9h', '9s'), ('Tc', 'Td'), ('Tc', 'Th'), ('Tc', 'Ts'), ('Td', 'Th'), ('Td', 'Ts'), ('Th', 'Ts'), ('Jc', 'Jd'), ('Jc', 'Jh'), ('Jc', 'Js'), ('Jd', 'Jh'), ('Jd', 'Js'), ('Jh', 'Js'), ('Qc', 'Qd'), ('Qc', 'Qh'), ('Qc', 'Qs'), ('Qd', 'Qh'), ('Qd', 'Qs'), ('Qh', 'Qs'), ('Kc', 'Kd'), ('Kc', 'Kh'), ('Kc', 'Ks'), ('Kd', 'Kh'), ('Kd', 'Ks'), ('Kh', 'Ks'), ('Ac', 'Ad'), ('Ac', 'Ah'), ('Ac', 'As'), ('Ad', 'Ah'), ('Ad', 'As'), ('Ah', 'As')], [('2c', '3c'), ('2d', '3d'), ('2h', '3h'), ('2s', '3s'), ('3c', '4c'), ('3d', '4d'), ('3h', '4h'), ('3s', '4s'), ('4c', '5c'), ('4d', '5d'), ('4h', '5h'), ('4s', '5s'), ('5c', '6c'), ('5d', '6d'), ('5h', '6h'), ('5s', '6s'), ('6c', '7c'), ('6d', '7d'), ('6h', '7h'), ('6s', '7s'), ('7c', '8c'), ('7d', '8d'), ('7h', '8h'), ('7s', '8s'), ('8c', '9c'), ('8d', '9d'), ('8h', '9h'), ('8s', '9s'), ('9c', 'Tc'), ('9d', 'Td'), ('9h', 'Th'), ('9s', 'Ts'), ('Tc', 'Jc'), ('Td', 'Jd'), ('Th', 'Jh'), ('Ts', 'Js'), ('Jc', 'Qc'), ('Jd', 'Qd'), ('Jh', 'Qh'), ('Js', 'Qs'), ('Qc', 'Kc'), ('Qd', 'Kd'), ('Qh', 'Kh'), ('Qs', 'Ks'), ('Kc', 'Ac'), ('Kd', 'Ad'), ('Kh', 'Ah'), ('Ks', 'As')], [('2c', '3d'), ('2c', '3h'), ('2c', '3s'), ('2d', '3c'), ('2d', '3h'), ('2d', '3s'), ('2h', '3c'), ('2h', '3d'), ('2h', '3s'), ('2s', '3c'), ('2s', '3d'), ('2s', '3h'), ('3c', '4d'), ('3c', '4h'), ('3c', '4s'), ('3d', '4c'), ('3d', '4h'), ('3d', '4s'), ('3h', '4c'), ('3h', '4d'), ('3h', '4s'), ('3s', '4c'), ('3s', '4d'), ('3s', '4h'), ('4c', '5d'), ('4c', '5h'), ('4c', '5s'), ('4d', '5c'), ('4d', '5h'), ('4d', '5s'), ('4h', '5c'), ('4h', '5d'), ('4h', '5s'), ('4s', '5c'), ('4s', '5d'), ('4s', '5h'), ('5c', '6d'), ('5c', '6h'), ('5c', '6s'), ('5d', '6c'), ('5d', '6h'), ('5d', '6s'), ('5h', '6c'), ('5h', '6d'), ('5h', '6s'), ('5s', '6c'), ('5s', '6d'), ('5s', '6h'), ('6c', '7d'), ('6c', '7h'), ('6c', '7s'), ('6d', '7c'), ('6d', '7h'), ('6d', '7s'), ('6h', '7c'), ('6h', '7d'), ('6h', '7s'), ('6s', '7c'), ('6s', '7d'), ('6s', '7h'), ('7c', '8d'), ('7c', '8h'), ('7c', '8s'), ('7d', '8c'), ('7d', '8h'), ('7d', '8s'), ('7h', '8c'), ('7h', '8d'), ('7h', '8s'), ('7s', '8c'), ('7s', '8d'), ('7s', '8h'), ('8c', '9d'), ('8c', '9h'), ('8c', '9s'), ('8d', '9c'), ('8d', '9h'), ('8d', '9s'), ('8h', '9c'), ('8h', '9d'), ('8h', '9s'), ('8s', '9c'), ('8s', '9d'), ('8s', '9h'), ('9c', 'Td'), ('9c', 'Th'), ('9c', 'Ts'), ('9d', 'Tc'), ('9d', 'Th'), ('9d', 'Ts'), ('9h', 'Tc'), ('9h', 'Td'), ('9h', 'Ts'), ('9s', 'Tc'), ('9s', 'Td'), ('9s', 'Th'), ('Tc', 'Jd'), ('Tc', 'Jh'), ('Tc', 'Js'), ('Td', 'Jc'), ('Td', 'Jh'), ('Td', 'Js'), ('Th', 'Jc'), ('Th', 'Jd'), ('Th', 'Js'), ('Ts', 'Jc'), ('Ts', 'Jd'), ('Ts', 'Jh'), ('Jc', 'Qd'), ('Jc', 'Qh'), ('Jc', 'Qs'), ('Jd', 'Qc'), ('Jd', 'Qh'), ('Jd', 'Qs'), ('Jh', 'Qc'), ('Jh', 'Qd'), ('Jh', 'Qs'), ('Js', 'Qc'), ('Js', 'Qd'), ('Js', 'Qh'), ('Qc', 'Kd'), ('Qc', 'Kh'), ('Qc', 'Ks'), ('Qd', 'Kc'), ('Qd', 'Kh'), ('Qd', 'Ks'), ('Qh', 'Kc'), ('Qh', 'Kd'), ('Qh', 'Ks'), ('Qs', 'Kc'), ('Qs', 'Kd'), ('Qs', 'Kh'), ('Kc', 'Ad'), ('Kc', 'Ah'), ('Kc', 'As'), ('Kd', 'Ac'), ('Kd', 'Ah'), ('Kd', 'As'), ('Kh', 'Ac'), ('Kh', 'Ad'), ('Kh', 'As'), ('Ks', 'Ac'), ('Ks', 'Ad'), ('Ks', 'Ah')], [('2c', '4c'), ('2c', '5c'), ('2c', '6c'), ('2c', '7c'), ('2c', '8c'), ('2c', '9c'), ('2c', 'Tc'), ('2c', 'Jc'), ('2c', 'Qc'), ('2c', 'Kc'), ('2c', 'Ac'), ('2d', '4d'), ('2d', '5d'), ('2d', '6d'), ('2d', '7d'), ('2d', '8d'), ('2d', '9d'), ('2d', 'Td'), ('2d', 'Jd'), ('2d', 'Qd'), ('2d', 'Kd'), ('2d', 'Ad'), ('2h', '4h'), ('2h', '5h'), ('2h', '6h'), ('2h', '7h'), ('2h', '8h'), ('2h', '9h'), ('2h', 'Th'), ('2h', 'Jh'), ('2h', 'Qh'), ('2h', 'Kh'), ('2h', 'Ah'), ('2s', '4s'), ('2s', '5s'), ('2s', '6s'), ('2s', '7s'), ('2s', '8s'), ('2s', '9s'), ('2s', 'Ts'), ('2s', 'Js'), ('2s', 'Qs'), ('2s', 'Ks'), ('2s', 'As'), ('3c', '5c'), ('3c', '6c'), ('3c', '7c'), ('3c', '8c'), ('3c', '9c'), ('3c', 'Tc'), ('3c', 'Jc'), ('3c', 'Qc'), ('3c', 'Kc'), ('3c', 'Ac'), ('3d', '5d'), ('3d', '6d'), ('3d', '7d'), ('3d', '8d'), ('3d', '9d'), ('3d', 'Td'), ('3d', 'Jd'), ('3d', 'Qd'), ('3d', 'Kd'), ('3d', 'Ad'), ('3h', '5h'), ('3h', '6h'), ('3h', '7h'), ('3h', '8h'), ('3h', '9h'), ('3h', 'Th'), ('3h', 'Jh'), ('3h', 'Qh'), ('3h', 'Kh'), ('3h', 'Ah'), ('3s', '5s'), ('3s', '6s'), ('3s', '7s'), ('3s', '8s'), ('3s', '9s'), ('3s', 'Ts'), ('3s', 'Js'), ('3s', 'Qs'), ('3s', 'Ks'), ('3s', 'As'), ('4c', '6c'), ('4c', '7c'), ('4c', '8c'), ('4c', '9c'), ('4c', 'Tc'), ('4c', 'Jc'), ('4c', 'Qc'), ('4c', 'Kc'), ('4c', 'Ac'), ('4d', '6d'), ('4d', '7d'), ('4d', '8d'), ('4d', '9d'), ('4d', 'Td'), ('4d', 'Jd'), ('4d', 'Qd'), ('4d', 'Kd'), ('4d', 'Ad'), ('4h', '6h'), ('4h', '7h'), ('4h', '8h'), ('4h', '9h'), ('4h', 'Th'), ('4h', 'Jh'), ('4h', 'Qh'), ('4h', 'Kh'), ('4h', 'Ah'), ('4s', '6s'), ('4s', '7s'), ('4s', '8s'), ('4s', '9s'), ('4s', 'Ts'), ('4s', 'Js'), ('4s', 'Qs'), ('4s', 'Ks'), ('4s', 'As'), ('5c', '7c'), ('5c', '8c'), ('5c', '9c'), ('5c', 'Tc'), ('5c', 'Jc'), ('5c', 'Qc'), ('5c', 'Kc'), ('5c', 'Ac'), ('5d', '7d'), ('5d', '8d'), ('5d', '9d'), ('5d', 'Td'), ('5d', 'Jd'), ('5d', 'Qd'), ('5d', 'Kd'), ('5d', 'Ad'), ('5h', '7h'), ('5h', '8h'), ('5h', '9h'), ('5h', 'Th'), ('5h', 'Jh'), ('5h', 'Qh'), ('5h', 'Kh'), ('5h', 'Ah'), ('5s', '7s'), ('5s', '8s'), ('5s', '9s'), ('5s', 'Ts'), ('5s', 'Js'), ('5s', 'Qs'), ('5s', 'Ks'), ('5s', 'As'), ('6c', '8c'), ('6c', '9c'), ('6c', 'Tc'), ('6c', 'Jc'), ('6c', 'Qc'), ('6c', 'Kc'), ('6c', 'Ac'), ('6d', '8d'), ('6d', '9d'), ('6d', 'Td'), ('6d', 'Jd'), ('6d', 'Qd'), ('6d', 'Kd'), ('6d', 'Ad'), ('6h', '8h'), ('6h', '9h'), ('6h', 'Th'), ('6h', 'Jh'), ('6h', 'Qh'), ('6h', 'Kh'), ('6h', 'Ah'), ('6s', '8s'), ('6s', '9s'), ('6s', 'Ts'), ('6s', 'Js'), ('6s', 'Qs'), ('6s', 'Ks'), ('6s', 'As'), ('7c', '9c'), ('7c', 'Tc'), ('7c', 'Jc'), ('7c', 'Qc'), ('7c', 'Kc'), ('7c', 'Ac'), ('7d', '9d'), ('7d', 'Td'), ('7d', 'Jd'), ('7d', 'Qd'), ('7d', 'Kd'), ('7d', 'Ad'), ('7h', '9h'), ('7h', 'Th'), ('7h', 'Jh'), ('7h', 'Qh'), ('7h', 'Kh'), ('7h', 'Ah'), ('7s', '9s'), ('7s', 'Ts'), ('7s', 'Js'), ('7s', 'Qs'), ('7s', 'Ks'), ('7s', 'As'), ('8c', 'Tc'), ('8c', 'Jc'), ('8c', 'Qc'), ('8c', 'Kc'), ('8c', 'Ac'), ('8d', 'Td'), ('8d', 'Jd'), ('8d', 'Qd'), ('8d', 'Kd'), ('8d', 'Ad'), ('8h', 'Th'), ('8h', 'Jh'), ('8h', 'Qh'), ('8h', 'Kh'), ('8h', 'Ah'), ('8s', 'Ts'), ('8s', 'Js'), ('8s', 'Qs'), ('8s', 'Ks'), ('8s', 'As'), ('9c', 'Jc'), ('9c', 'Qc'), ('9c', 'Kc'), ('9c', 'Ac'), ('9d', 'Jd'), ('9d', 'Qd'), ('9d', 'Kd'), ('9d', 'Ad'), ('9h', 'Jh'), ('9h', 'Qh'), ('9h', 'Kh'), ('9h', 'Ah'), ('9s', 'Js'), ('9s', 'Qs'), ('9s', 'Ks'), ('9s', 'As'), ('Tc', 'Qc'), ('Tc', 'Kc'), ('Tc', 'Ac'), ('Td', 'Qd'), ('Td', 'Kd'), ('Td', 'Ad'), ('Th', 'Qh'), ('Th', 'Kh'), ('Th', 'Ah'), ('Ts', 'Qs'), ('Ts', 'Ks'), ('Ts', 'As'), ('Jc', 'Kc'), ('Jc', 'Ac'), ('Jd', 'Kd'), ('Jd', 'Ad'), ('Jh', 'Kh'), ('Jh', 'Ah'), ('Js', 'Ks'), ('Js', 'As'), ('Qc', 'Ac'), ('Qd', 'Ad'), ('Qh', 'Ah'), ('Qs', 'As')], [('2c', '4d'), ('2c', '4h'), ('2c', '4s'), ('2c', '5d'), ('2c', '5h'), ('2c', '5s'), ('2c', '6d'), ('2c', '6h'), ('2c', '6s'), ('2d', '4c'), ('2d', '4h'), ('2d', '4s'), ('2d', '5c'), ('2d', '5h'), ('2d', '5s'), ('2d', '6c'), ('2d', '6h'), ('2d', '6s'), ('2h', '4c'), ('2h', '4d'), ('2h', '4s'), ('2h', '5c'), ('2h', '5d'), ('2h', '5s'), ('2h', '6c'), ('2h', '6d'), ('2h', '6s'), ('2s', '4c'), ('2s', '4d'), ('2s', '4h'), ('2s', '5c'), ('2s', '5d'), ('2s', '5h'), ('2s', '6c'), ('2s', '6d'), ('2s', '6h'), ('3c', '5d'), ('3c', '5h'), ('3c', '5s'), ('3c', '6d'), ('3c', '6h'), ('3c', '6s'), ('3c', '7d'), ('3c', '7h'), ('3c', '7s'), ('3d', '5c'), ('3d', '5h'), ('3d', '5s'), ('3d', '6c'), ('3d', '6h'), ('3d', '6s'), ('3d', '7c'), ('3d', '7h'), ('3d', '7s'), ('3h', '5c'), ('3h', '5d'), ('3h', '5s'), ('3h', '6c'), ('3h', '6d'), ('3h', '6s'), ('3h', '7c'), ('3h', '7d'), ('3h', '7s'), ('3s', '5c'), ('3s', '5d'), ('3s', '5h'), ('3s', '6c'), ('3s', '6d'), ('3s', '6h'), ('3s', '7c'), ('3s', '7d'), ('3s', '7h'), ('4c', '6d'), ('4c', '6h'), ('4c', '6s'), ('4c', '7d'), ('4c', '7h'), ('4c', '7s'), ('4c', '8d'), ('4c', '8h'), ('4c', '8s'), ('4d', '6c'), ('4d', '6h'), ('4d', '6s'), ('4d', '7c'), ('4d', '7h'), ('4d', '7s'), ('4d', '8c'), ('4d', '8h'), ('4d', '8s'), ('4h', '6c'), ('4h', '6d'), ('4h', '6s'), ('4h', '7c'), ('4h', '7d'), ('4h', '7s'), ('4h', '8c'), ('4h', '8d'), ('4h', '8s'), ('4s', '6c'), ('4s', '6d'), ('4s', '6h'), ('4s', '7c'), ('4s', '7d'), ('4s', '7h'), ('4s', '8c'), ('4s', '8d'), ('4s', '8h'), ('5c', '7d'), ('5c', '7h'), ('5c', '7s'), ('5c', '8d'), ('5c', '8h'), ('5c', '8s'), ('5c', '9d'), ('5c', '9h'), ('5c', '9s'), ('5d', '7c'), ('5d', '7h'), ('5d', '7s'), ('5d', '8c'), ('5d', '8h'), ('5d', '8s'), ('5d', '9c'), ('5d', '9h'), ('5d', '9s'), ('5h', '7c'), ('5h', '7d'), ('5h', '7s'), ('5h', '8c'), ('5h', '8d'), ('5h', '8s'), ('5h', '9c'), ('5h', '9d'), ('5h', '9s'), ('5s', '7c'), ('5s', '7d'), ('5s', '7h'), ('5s', '8c'), ('5s', '8d'), ('5s', '8h'), ('5s', '9c'), ('5s', '9d'), ('5s', '9h'), ('6c', '8d'), ('6c', '8h'), ('6c', '8s'), ('6c', '9d'), ('6c', '9h'), ('6c', '9s'), ('6c', 'Td'), ('6c', 'Th'), ('6c', 'Ts'), ('6d', '8c'), ('6d', '8h'), ('6d', '8s'), ('6d', '9c'), ('6d', '9h'), ('6d', '9s'), ('6d', 'Tc'), ('6d', 'Th'), ('6d', 'Ts'), ('6h', '8c'), ('6h', '8d'), ('6h', '8s'), ('6h', '9c'), ('6h', '9d'), ('6h', '9s'), ('6h', 'Tc'), ('6h', 'Td'), ('6h', 'Ts'), ('6s', '8c'), ('6s', '8d'), ('6s', '8h'), ('6s', '9c'), ('6s', '9d'), ('6s', '9h'), ('6s', 'Tc'), ('6s', 'Td'), ('6s', 'Th'), ('7c', '9d'), ('7c', '9h'), ('7c', '9s'), ('7c', 'Td'), ('7c', 'Th'), ('7c', 'Ts'), ('7c', 'Jd'), ('7c', 'Jh'), ('7c', 'Js'), ('7d', '9c'), ('7d', '9h'), ('7d', '9s'), ('7d', 'Tc'), ('7d', 'Th'), ('7d', 'Ts'), ('7d', 'Jc'), ('7d', 'Jh'), ('7d', 'Js'), ('7h', '9c'), ('7h', '9d'), ('7h', '9s'), ('7h', 'Tc'), ('7h', 'Td'), ('7h', 'Ts'), ('7h', 'Jc'), ('7h', 'Jd'), ('7h', 'Js'), ('7s', '9c'), ('7s', '9d'), ('7s', '9h'), ('7s', 'Tc'), ('7s', 'Td'), ('7s', 'Th'), ('7s', 'Jc'), ('7s', 'Jd'), ('7s', 'Jh'), ('8c', 'Td'), ('8c', 'Th'), ('8c', 'Ts'), ('8c', 'Jd'), ('8c', 'Jh'), ('8c', 'Js'), ('8c', 'Qd'), ('8c', 'Qh'), ('8c', 'Qs'), ('8d', 'Tc'), ('8d', 'Th'), ('8d', 'Ts'), ('8d', 'Jc'), ('8d', 'Jh'), ('8d', 'Js'), ('8d', 'Qc'), ('8d', 'Qh'), ('8d', 'Qs'), ('8h', 'Tc'), ('8h', 'Td'), ('8h', 'Ts'), ('8h', 'Jc'), ('8h', 'Jd'), ('8h', 'Js'), ('8h', 'Qc'), ('8h', 'Qd'), ('8h', 'Qs'), ('8s', 'Tc'), ('8s', 'Td'), ('8s', 'Th'), ('8s', 'Jc'), ('8s', 'Jd'), ('8s', 'Jh'), ('8s', 'Qc'), ('8s', 'Qd'), ('8s', 'Qh'), ('9c', 'Jd'), ('9c', 'Jh'), ('9c', 'Js'), ('9c', 'Qd'), ('9c', 'Qh'), ('9c', 'Qs'), ('9c', 'Kd'), ('9c', 'Kh'), ('9c', 'Ks'), ('9d', 'Jc'), ('9d', 'Jh'), ('9d', 'Js'), ('9d', 'Qc'), ('9d', 'Qh'), ('9d', 'Qs'), ('9d', 'Kc'), ('9d', 'Kh'), ('9d', 'Ks'), ('9h', 'Jc'), ('9h', 'Jd'), ('9h', 'Js'), ('9h', 'Qc'), ('9h', 'Qd'), ('9h', 'Qs'), ('9h', 'Kc'), ('9h', 'Kd'), ('9h', 'Ks'), ('9s', 'Jc'), ('9s', 'Jd'), ('9s', 'Jh'), ('9s', 'Qc'), ('9s', 'Qd'), ('9s', 'Qh'), ('9s', 'Kc'), ('9s', 'Kd'), ('9s', 'Kh'), ('Tc', 'Qd'), ('Tc', 'Qh'), ('Tc', 'Qs'), ('Tc', 'Kd'), ('Tc', 'Kh'), ('Tc', 'Ks'), ('Tc', 'Ad'), ('Tc', 'Ah'), ('Tc', 'As'), ('Td', 'Qc'), ('Td', 'Qh'), ('Td', 'Qs'), ('Td', 'Kc'), ('Td', 'Kh'), ('Td', 'Ks'), ('Td', 'Ac'), ('Td', 'Ah'), ('Td', 'As'), ('Th', 'Qc'), ('Th', 'Qd'), ('Th', 'Qs'), ('Th', 'Kc'), ('Th', 'Kd'), ('Th', 'Ks'), ('Th', 'Ac'), ('Th', 'Ad'), ('Th', 'As'), ('Ts', 'Qc'), ('Ts', 'Qd'), ('Ts', 'Qh'), ('Ts', 'Kc'), ('Ts', 'Kd'), ('Ts', 'Kh'), ('Ts', 'Ac'), ('Ts', 'Ad'), ('Ts', 'Ah'), ('Jc', 'Kd'), ('Jc', 'Kh'), ('Jc', 'Ks'), ('Jc', 'Ad'), ('Jc', 'Ah'), ('Jc', 'As'), ('Jd', 'Kc'), ('Jd', 'Kh'), ('Jd', 'Ks'), ('Jd', 'Ac'), ('Jd', 'Ah'), ('Jd', 'As'), ('Jh', 'Kc'), ('Jh', 'Kd'), ('Jh', 'Ks'), ('Jh', 'Ac'), ('Jh', 'Ad'), ('Jh', 'As'), ('Js', 'Kc'), ('Js', 'Kd'), ('Js', 'Kh'), ('Js', 'Ac'), ('Js', 'Ad'), ('Js', 'Ah'), ('Qc', 'Ad'), ('Qc', 'Ah'), ('Qc', 'As'), ('Qd', 'Ac'), ('Qd', 'Ah'), ('Qd', 'As'), ('Qh', 'Ac'), ('Qh', 'Ad'), ('Qh', 'As'), ('Qs', 'Ac'), ('Qs', 'Ad'), ('Qs', 'Ah')], [('2c', '7d'), ('2c', '7h'), ('2c', '7s'), ('2c', '8d'), ('2c', '8h'), ('2c', '8s'), ('2c', '9d'), ('2c', '9h'), ('2c', '9s'), ('2c', 'Td'), ('2c', 'Th'), ('2c', 'Ts'), ('2c', 'Jd'), ('2c', 'Jh'), ('2c', 'Js'), ('2c', 'Qd'), ('2c', 'Qh'), ('2c', 'Qs'), ('2c', 'Kd'), ('2c', 'Kh'), ('2c', 'Ks'), ('2c', 'Ad'), ('2c', 'Ah'), ('2c', 'As'), ('2d', '7c'), ('2d', '7h'), ('2d', '7s'), ('2d', '8c'), ('2d', '8h'), ('2d', '8s'), ('2d', '9c'), ('2d', '9h'), ('2d', '9s'), ('2d', 'Tc'), ('2d', 'Th'), ('2d', 'Ts'), ('2d', 'Jc'), ('2d', 'Jh'), ('2d', 'Js'), ('2d', 'Qc'), ('2d', 'Qh'), ('2d', 'Qs'), ('2d', 'Kc'), ('2d', 'Kh'), ('2d', 'Ks'), ('2d', 'Ac'), ('2d', 'Ah'), ('2d', 'As'), ('2h', '7c'), ('2h', '7d'), ('2h', '7s'), ('2h', '8c'), ('2h', '8d'), ('2h', '8s'), ('2h', '9c'), ('2h', '9d'), ('2h', '9s'), ('2h', 'Tc'), ('2h', 'Td'), ('2h', 'Ts'), ('2h', 'Jc'), ('2h', 'Jd'), ('2h', 'Js'), ('2h', 'Qc'), ('2h', 'Qd'), ('2h', 'Qs'), ('2h', 'Kc'), ('2h', 'Kd'), ('2h', 'Ks'), ('2h', 'Ac'), ('2h', 'Ad'), ('2h', 'As'), ('2s', '7c'), ('2s', '7d'), ('2s', '7h'), ('2s', '8c'), ('2s', '8d'), ('2s', '8h'), ('2s', '9c'), ('2s', '9d'), ('2s', '9h'), ('2s', 'Tc'), ('2s', 'Td'), ('2s', 'Th'), ('2s', 'Jc'), ('2s', 'Jd'), ('2s', 'Jh'), ('2s', 'Qc'), ('2s', 'Qd'), ('2s', 'Qh'), ('2s', 'Kc'), ('2s', 'Kd'), ('2s', 'Kh'), ('2s', 'Ac'), ('2s', 'Ad'), ('2s', 'Ah'), ('3c', '8d'), ('3c', '8h'), ('3c', '8s'), ('3c', '9d'), ('3c', '9h'), ('3c', '9s'), ('3c', 'Td'), ('3c', 'Th'), ('3c', 'Ts'), ('3c', 'Jd'), ('3c', 'Jh'), ('3c', 'Js'), ('3c', 'Qd'), ('3c', 'Qh'), ('3c', 'Qs'), ('3c', 'Kd'), ('3c', 'Kh'), ('3c', 'Ks'), ('3c', 'Ad'), ('3c', 'Ah'), ('3c', 'As'), ('3d', '8c'), ('3d', '8h'), ('3d', '8s'), ('3d', '9c'), ('3d', '9h'), ('3d', '9s'), ('3d', 'Tc'), ('3d', 'Th'), ('3d', 'Ts'), ('3d', 'Jc'), ('3d', 'Jh'), ('3d', 'Js'), ('3d', 'Qc'), ('3d', 'Qh'), ('3d', 'Qs'), ('3d', 'Kc'), ('3d', 'Kh'), ('3d', 'Ks'), ('3d', 'Ac'), ('3d', 'Ah'), ('3d', 'As'), ('3h', '8c'), ('3h', '8d'), ('3h', '8s'), ('3h', '9c'), ('3h', '9d'), ('3h', '9s'), ('3h', 'Tc'), ('3h', 'Td'), ('3h', 'Ts'), ('3h', 'Jc'), ('3h', 'Jd'), ('3h', 'Js'), ('3h', 'Qc'), ('3h', 'Qd'), ('3h', 'Qs'), ('3h', 'Kc'), ('3h', 'Kd'), ('3h', 'Ks'), ('3h', 'Ac'), ('3h', 'Ad'), ('3h', 'As'), ('3s', '8c'), ('3s', '8d'), ('3s', '8h'), ('3s', '9c'), ('3s', '9d'), ('3s', '9h'), ('3s', 'Tc'), ('3s', 'Td'), ('3s', 'Th'), ('3s', 'Jc'), ('3s', 'Jd'), ('3s', 'Jh'), ('3s', 'Qc'), ('3s', 'Qd'), ('3s', 'Qh'), ('3s', 'Kc'), ('3s', 'Kd'), ('3s', 'Kh'), ('3s', 'Ac'), ('3s', 'Ad'), ('3s', 'Ah'), ('4c', '9d'), ('4c', '9h'), ('4c', '9s'), ('4c', 'Td'), ('4c', 'Th'), ('4c', 'Ts'), ('4c', 'Jd'), ('4c', 'Jh'), ('4c', 'Js'), ('4c', 'Qd'), ('4c', 'Qh'), ('4c', 'Qs'), ('4c', 'Kd'), ('4c', 'Kh'), ('4c', 'Ks'), ('4c', 'Ad'), ('4c', 'Ah'), ('4c', 'As'), ('4d', '9c'), ('4d', '9h'), ('4d', '9s'), ('4d', 'Tc'), ('4d', 'Th'), ('4d', 'Ts'), ('4d', 'Jc'), ('4d', 'Jh'), ('4d', 'Js'), ('4d', 'Qc'), ('4d', 'Qh'), ('4d', 'Qs'), ('4d', 'Kc'), ('4d', 'Kh'), ('4d', 'Ks'), ('4d', 'Ac'), ('4d', 'Ah'), ('4d', 'As'), ('4h', '9c'), ('4h', '9d'), ('4h', '9s'), ('4h', 'Tc'), ('4h', 'Td'), ('4h', 'Ts'), ('4h', 'Jc'), ('4h', 'Jd'), ('4h', 'Js'), ('4h', 'Qc'), ('4h', 'Qd'), ('4h', 'Qs'), ('4h', 'Kc'), ('4h', 'Kd'), ('4h', 'Ks'), ('4h', 'Ac'), ('4h', 'Ad'), ('4h', 'As'), ('4s', '9c'), ('4s', '9d'), ('4s', '9h'), ('4s', 'Tc'), ('4s', 'Td'), ('4s', 'Th'), ('4s', 'Jc'), ('4s', 'Jd'), ('4s', 'Jh'), ('4s', 'Qc'), ('4s', 'Qd'), ('4s', 'Qh'), ('4s', 'Kc'), ('4s', 'Kd'), ('4s', 'Kh'), ('4s', 'Ac'), ('4s', 'Ad'), ('4s', 'Ah'), ('5c', 'Td'), ('5c', 'Th'), ('5c', 'Ts'), ('5c', 'Jd'), ('5c', 'Jh'), ('5c', 'Js'), ('5c', 'Qd'), ('5c', 'Qh'), ('5c', 'Qs'), ('5c', 'Kd'), ('5c', 'Kh'), ('5c', 'Ks'), ('5c', 'Ad'), ('5c', 'Ah'), ('5c', 'As'), ('5d', 'Tc'), ('5d', 'Th'), ('5d', 'Ts'), ('5d', 'Jc'), ('5d', 'Jh'), ('5d', 'Js'), ('5d', 'Qc'), ('5d', 'Qh'), ('5d', 'Qs'), ('5d', 'Kc'), ('5d', 'Kh'), ('5d', 'Ks'), ('5d', 'Ac'), ('5d', 'Ah'), ('5d', 'As'), ('5h', 'Tc'), ('5h', 'Td'), ('5h', 'Ts'), ('5h', 'Jc'), ('5h', 'Jd'), ('5h', 'Js'), ('5h', 'Qc'), ('5h', 'Qd'), ('5h', 'Qs'), ('5h', 'Kc'), ('5h', 'Kd'), ('5h', 'Ks'), ('5h', 'Ac'), ('5h', 'Ad'), ('5h', 'As'), ('5s', 'Tc'), ('5s', 'Td'), ('5s', 'Th'), ('5s', 'Jc'), ('5s', 'Jd'), ('5s', 'Jh'), ('5s', 'Qc'), ('5s', 'Qd'), ('5s', 'Qh'), ('5s', 'Kc'), ('5s', 'Kd'), ('5s', 'Kh'), ('5s', 'Ac'), ('5s', 'Ad'), ('5s', 'Ah'), ('6c', 'Jd'), ('6c', 'Jh'), ('6c', 'Js'), ('6c', 'Qd'), ('6c', 'Qh'), ('6c', 'Qs'), ('6c', 'Kd'), ('6c', 'Kh'), ('6c', 'Ks'), ('6c', 'Ad'), ('6c', 'Ah'), ('6c', 'As'), ('6d', 'Jc'), ('6d', 'Jh'), ('6d', 'Js'), ('6d', 'Qc'), ('6d', 'Qh'), ('6d', 'Qs'), ('6d', 'Kc'), ('6d', 'Kh'), ('6d', 'Ks'), ('6d', 'Ac'), ('6d', 'Ah'), ('6d', 'As'), ('6h', 'Jc'), ('6h', 'Jd'), ('6h', 'Js'), ('6h', 'Qc'), ('6h', 'Qd'), ('6h', 'Qs'), ('6h', 'Kc'), ('6h', 'Kd'), ('6h', 'Ks'), ('6h', 'Ac'), ('6h', 'Ad'), ('6h', 'As'), ('6s', 'Jc'), ('6s', 'Jd'), ('6s', 'Jh'), ('6s', 'Qc'), ('6s', 'Qd'), ('6s', 'Qh'), ('6s', 'Kc'), ('6s', 'Kd'), ('6s', 'Kh'), ('6s', 'Ac'), ('6s', 'Ad'), ('6s', 'Ah'), ('7c', 'Qd'), ('7c', 'Qh'), ('7c', 'Qs'), ('7c', 'Kd'), ('7c', 'Kh'), ('7c', 'Ks'), ('7c', 'Ad'), ('7c', 'Ah'), ('7c', 'As'), ('7d', 'Qc'), ('7d', 'Qh'), ('7d', 'Qs'), ('7d', 'Kc'), ('7d', 'Kh'), ('7d', 'Ks'), ('7d', 'Ac'), ('7d', 'Ah'), ('7d', 'As'), ('7h', 'Qc'), ('7h', 'Qd'), ('7h', 'Qs'), ('7h', 'Kc'), ('7h', 'Kd'), ('7h', 'Ks'), ('7h', 'Ac'), ('7h', 'Ad'), ('7h', 'As'), ('7s', 'Qc'), ('7s', 'Qd'), ('7s', 'Qh'), ('7s', 'Kc'), ('7s', 'Kd'), ('7s', 'Kh'), ('7s', 'Ac'), ('7s', 'Ad'), ('7s', 'Ah'), ('8c', 'Kd'), ('8c', 'Kh'), ('8c', 'Ks'), ('8c', 'Ad'), ('8c', 'Ah'), ('8c', 'As'), ('8d', 'Kc'), ('8d', 'Kh'), ('8d', 'Ks'), ('8d', 'Ac'), ('8d', 'Ah'), ('8d', 'As'), ('8h', 'Kc'), ('8h', 'Kd'), ('8h', 'Ks'), ('8h', 'Ac'), ('8h', 'Ad'), ('8h', 'As'), ('8s', 'Kc'), ('8s', 'Kd'), ('8s', 'Kh'), ('8s', 'Ac'), ('8s', 'Ad'), ('8s', 'Ah'), ('9c', 'Ad'), ('9c', 'Ah'), ('9c', 'As'), ('9d', 'Ac'), ('9d', 'Ah'), ('9d', 'As'), ('9h', 'Ac'), ('9h', 'Ad'), ('9h', 'As'), ('9s', 'Ac'), ('9s', 'Ad'), ('9s', 'Ah')]]
    preflop_hands = []  # A list of 6*n random hole card pairs, n from each of the six preflop buckets
    preflop_cards = []  # The actual cards that were dealt
    for type in preflop_type:
        new_cards_added = 0
        while new_cards_added < n:
            rand = random.randint(0, len(type) - 1)
            hand = type[rand]
            if hand[0] not in preflop_cards and hand[1] not in preflop_cards:
                preflop_hands.append(hand)
                preflop_cards.append(hand[0])
                preflop_cards.append(hand[1])
                new_cards_added += 1
    return preflop_hands

def generate_random_flop(hole_cards_1, hole_cards_2):
    """
    Takes in both players hole cards and generates a set of three board cards.
    """
    new_deck=deck[:] #Copy the original deck
    new_deck.remove(hole_cards_1[0])
    new_deck.remove(hole_cards_1[1])
    new_deck.remove(hole_cards_2[0])
    new_deck.remove(hole_cards_2[1])
    board_cards=list(itertools.combinations(new_deck, 3))
    return board_cards[random.randint(0, len(board_cards)-1)]

def generate_random_river(hole_cards_1, hole_cards_2, board_cards):
    """
    Takes in both players hole cards and the existing board cards and adds one card to the board cards.
    """
    new_deck=deck[:] #Copy the original deck
    new_deck.remove(hole_cards_1[0])
    new_deck.remove(hole_cards_1[1])
    new_deck.remove(hole_cards_2[0])
    new_deck.remove(hole_cards_2[1])
    new_deck.remove(board_cards[0])
    new_deck.remove(board_cards[1])
    new_deck.remove(board_cards[2])
    return (board_cards[0], board_cards[1], board_cards[2], new_deck[random.randint(0, len(new_deck)-1)])

def generate_random_turn(hole_cards_1, hole_cards_2, board_cards):
    """
    Takes in both players hole cards and the existing board cards and adds one card to the board cards.
    """
    new_deck = deck[:]  # Copy the original deck
    new_deck.remove(hole_cards_1[0])
    new_deck.remove(hole_cards_1[1])
    new_deck.remove(hole_cards_2[0])
    new_deck.remove(hole_cards_2[1])
    new_deck.remove(board_cards[0])
    new_deck.remove(board_cards[1])
    new_deck.remove(board_cards[2])
    new_deck.remove(board_cards[3])
    return (board_cards[0], board_cards[1], board_cards[2], board_cards[3], new_deck[random.randint(0, len(new_deck) - 1)])

def bucket_preflop_cards(hole_cards):
    """
    Takes in hole cards and returns what preflop bucket they fall into
    """
    preflop_type=[[('2c', '2d'), ('2c', '2h'), ('2c', '2s'), ('2d', '2h'), ('2d', '2s'), ('2h', '2s'), ('3c', '3d'), ('3c', '3h'), ('3c', '3s'), ('3d', '3h'), ('3d', '3s'), ('3h', '3s'), ('4c', '4d'), ('4c', '4h'), ('4c', '4s'), ('4d', '4h'), ('4d', '4s'), ('4h', '4s'), ('5c', '5d'), ('5c', '5h'), ('5c', '5s'), ('5d', '5h'), ('5d', '5s'), ('5h', '5s'), ('6c', '6d'), ('6c', '6h'), ('6c', '6s'), ('6d', '6h'), ('6d', '6s'), ('6h', '6s'), ('7c', '7d'), ('7c', '7h'), ('7c', '7s'), ('7d', '7h'), ('7d', '7s'), ('7h', '7s'), ('8c', '8d'), ('8c', '8h'), ('8c', '8s'), ('8d', '8h'), ('8d', '8s'), ('8h', '8s'), ('9c', '9d'), ('9c', '9h'), ('9c', '9s'), ('9d', '9h'), ('9d', '9s'), ('9h', '9s'), ('Tc', 'Td'), ('Tc', 'Th'), ('Tc', 'Ts'), ('Td', 'Th'), ('Td', 'Ts'), ('Th', 'Ts'), ('Jc', 'Jd'), ('Jc', 'Jh'), ('Jc', 'Js'), ('Jd', 'Jh'), ('Jd', 'Js'), ('Jh', 'Js'), ('Qc', 'Qd'), ('Qc', 'Qh'), ('Qc', 'Qs'), ('Qd', 'Qh'), ('Qd', 'Qs'), ('Qh', 'Qs'), ('Kc', 'Kd'), ('Kc', 'Kh'), ('Kc', 'Ks'), ('Kd', 'Kh'), ('Kd', 'Ks'), ('Kh', 'Ks'), ('Ac', 'Ad'), ('Ac', 'Ah'), ('Ac', 'As'), ('Ad', 'Ah'), ('Ad', 'As'), ('Ah', 'As')], [('2c', '3c'), ('2d', '3d'), ('2h', '3h'), ('2s', '3s'), ('3c', '4c'), ('3d', '4d'), ('3h', '4h'), ('3s', '4s'), ('4c', '5c'), ('4d', '5d'), ('4h', '5h'), ('4s', '5s'), ('5c', '6c'), ('5d', '6d'), ('5h', '6h'), ('5s', '6s'), ('6c', '7c'), ('6d', '7d'), ('6h', '7h'), ('6s', '7s'), ('7c', '8c'), ('7d', '8d'), ('7h', '8h'), ('7s', '8s'), ('8c', '9c'), ('8d', '9d'), ('8h', '9h'), ('8s', '9s'), ('9c', 'Tc'), ('9d', 'Td'), ('9h', 'Th'), ('9s', 'Ts'), ('Tc', 'Jc'), ('Td', 'Jd'), ('Th', 'Jh'), ('Ts', 'Js'), ('Jc', 'Qc'), ('Jd', 'Qd'), ('Jh', 'Qh'), ('Js', 'Qs'), ('Qc', 'Kc'), ('Qd', 'Kd'), ('Qh', 'Kh'), ('Qs', 'Ks'), ('Kc', 'Ac'), ('Kd', 'Ad'), ('Kh', 'Ah'), ('Ks', 'As')], [('2c', '3d'), ('2c', '3h'), ('2c', '3s'), ('2d', '3c'), ('2d', '3h'), ('2d', '3s'), ('2h', '3c'), ('2h', '3d'), ('2h', '3s'), ('2s', '3c'), ('2s', '3d'), ('2s', '3h'), ('3c', '4d'), ('3c', '4h'), ('3c', '4s'), ('3d', '4c'), ('3d', '4h'), ('3d', '4s'), ('3h', '4c'), ('3h', '4d'), ('3h', '4s'), ('3s', '4c'), ('3s', '4d'), ('3s', '4h'), ('4c', '5d'), ('4c', '5h'), ('4c', '5s'), ('4d', '5c'), ('4d', '5h'), ('4d', '5s'), ('4h', '5c'), ('4h', '5d'), ('4h', '5s'), ('4s', '5c'), ('4s', '5d'), ('4s', '5h'), ('5c', '6d'), ('5c', '6h'), ('5c', '6s'), ('5d', '6c'), ('5d', '6h'), ('5d', '6s'), ('5h', '6c'), ('5h', '6d'), ('5h', '6s'), ('5s', '6c'), ('5s', '6d'), ('5s', '6h'), ('6c', '7d'), ('6c', '7h'), ('6c', '7s'), ('6d', '7c'), ('6d', '7h'), ('6d', '7s'), ('6h', '7c'), ('6h', '7d'), ('6h', '7s'), ('6s', '7c'), ('6s', '7d'), ('6s', '7h'), ('7c', '8d'), ('7c', '8h'), ('7c', '8s'), ('7d', '8c'), ('7d', '8h'), ('7d', '8s'), ('7h', '8c'), ('7h', '8d'), ('7h', '8s'), ('7s', '8c'), ('7s', '8d'), ('7s', '8h'), ('8c', '9d'), ('8c', '9h'), ('8c', '9s'), ('8d', '9c'), ('8d', '9h'), ('8d', '9s'), ('8h', '9c'), ('8h', '9d'), ('8h', '9s'), ('8s', '9c'), ('8s', '9d'), ('8s', '9h'), ('9c', 'Td'), ('9c', 'Th'), ('9c', 'Ts'), ('9d', 'Tc'), ('9d', 'Th'), ('9d', 'Ts'), ('9h', 'Tc'), ('9h', 'Td'), ('9h', 'Ts'), ('9s', 'Tc'), ('9s', 'Td'), ('9s', 'Th'), ('Tc', 'Jd'), ('Tc', 'Jh'), ('Tc', 'Js'), ('Td', 'Jc'), ('Td', 'Jh'), ('Td', 'Js'), ('Th', 'Jc'), ('Th', 'Jd'), ('Th', 'Js'), ('Ts', 'Jc'), ('Ts', 'Jd'), ('Ts', 'Jh'), ('Jc', 'Qd'), ('Jc', 'Qh'), ('Jc', 'Qs'), ('Jd', 'Qc'), ('Jd', 'Qh'), ('Jd', 'Qs'), ('Jh', 'Qc'), ('Jh', 'Qd'), ('Jh', 'Qs'), ('Js', 'Qc'), ('Js', 'Qd'), ('Js', 'Qh'), ('Qc', 'Kd'), ('Qc', 'Kh'), ('Qc', 'Ks'), ('Qd', 'Kc'), ('Qd', 'Kh'), ('Qd', 'Ks'), ('Qh', 'Kc'), ('Qh', 'Kd'), ('Qh', 'Ks'), ('Qs', 'Kc'), ('Qs', 'Kd'), ('Qs', 'Kh'), ('Kc', 'Ad'), ('Kc', 'Ah'), ('Kc', 'As'), ('Kd', 'Ac'), ('Kd', 'Ah'), ('Kd', 'As'), ('Kh', 'Ac'), ('Kh', 'Ad'), ('Kh', 'As'), ('Ks', 'Ac'), ('Ks', 'Ad'), ('Ks', 'Ah')], [('2c', '4c'), ('2c', '5c'), ('2c', '6c'), ('2c', '7c'), ('2c', '8c'), ('2c', '9c'), ('2c', 'Tc'), ('2c', 'Jc'), ('2c', 'Qc'), ('2c', 'Kc'), ('2c', 'Ac'), ('2d', '4d'), ('2d', '5d'), ('2d', '6d'), ('2d', '7d'), ('2d', '8d'), ('2d', '9d'), ('2d', 'Td'), ('2d', 'Jd'), ('2d', 'Qd'), ('2d', 'Kd'), ('2d', 'Ad'), ('2h', '4h'), ('2h', '5h'), ('2h', '6h'), ('2h', '7h'), ('2h', '8h'), ('2h', '9h'), ('2h', 'Th'), ('2h', 'Jh'), ('2h', 'Qh'), ('2h', 'Kh'), ('2h', 'Ah'), ('2s', '4s'), ('2s', '5s'), ('2s', '6s'), ('2s', '7s'), ('2s', '8s'), ('2s', '9s'), ('2s', 'Ts'), ('2s', 'Js'), ('2s', 'Qs'), ('2s', 'Ks'), ('2s', 'As'), ('3c', '5c'), ('3c', '6c'), ('3c', '7c'), ('3c', '8c'), ('3c', '9c'), ('3c', 'Tc'), ('3c', 'Jc'), ('3c', 'Qc'), ('3c', 'Kc'), ('3c', 'Ac'), ('3d', '5d'), ('3d', '6d'), ('3d', '7d'), ('3d', '8d'), ('3d', '9d'), ('3d', 'Td'), ('3d', 'Jd'), ('3d', 'Qd'), ('3d', 'Kd'), ('3d', 'Ad'), ('3h', '5h'), ('3h', '6h'), ('3h', '7h'), ('3h', '8h'), ('3h', '9h'), ('3h', 'Th'), ('3h', 'Jh'), ('3h', 'Qh'), ('3h', 'Kh'), ('3h', 'Ah'), ('3s', '5s'), ('3s', '6s'), ('3s', '7s'), ('3s', '8s'), ('3s', '9s'), ('3s', 'Ts'), ('3s', 'Js'), ('3s', 'Qs'), ('3s', 'Ks'), ('3s', 'As'), ('4c', '6c'), ('4c', '7c'), ('4c', '8c'), ('4c', '9c'), ('4c', 'Tc'), ('4c', 'Jc'), ('4c', 'Qc'), ('4c', 'Kc'), ('4c', 'Ac'), ('4d', '6d'), ('4d', '7d'), ('4d', '8d'), ('4d', '9d'), ('4d', 'Td'), ('4d', 'Jd'), ('4d', 'Qd'), ('4d', 'Kd'), ('4d', 'Ad'), ('4h', '6h'), ('4h', '7h'), ('4h', '8h'), ('4h', '9h'), ('4h', 'Th'), ('4h', 'Jh'), ('4h', 'Qh'), ('4h', 'Kh'), ('4h', 'Ah'), ('4s', '6s'), ('4s', '7s'), ('4s', '8s'), ('4s', '9s'), ('4s', 'Ts'), ('4s', 'Js'), ('4s', 'Qs'), ('4s', 'Ks'), ('4s', 'As'), ('5c', '7c'), ('5c', '8c'), ('5c', '9c'), ('5c', 'Tc'), ('5c', 'Jc'), ('5c', 'Qc'), ('5c', 'Kc'), ('5c', 'Ac'), ('5d', '7d'), ('5d', '8d'), ('5d', '9d'), ('5d', 'Td'), ('5d', 'Jd'), ('5d', 'Qd'), ('5d', 'Kd'), ('5d', 'Ad'), ('5h', '7h'), ('5h', '8h'), ('5h', '9h'), ('5h', 'Th'), ('5h', 'Jh'), ('5h', 'Qh'), ('5h', 'Kh'), ('5h', 'Ah'), ('5s', '7s'), ('5s', '8s'), ('5s', '9s'), ('5s', 'Ts'), ('5s', 'Js'), ('5s', 'Qs'), ('5s', 'Ks'), ('5s', 'As'), ('6c', '8c'), ('6c', '9c'), ('6c', 'Tc'), ('6c', 'Jc'), ('6c', 'Qc'), ('6c', 'Kc'), ('6c', 'Ac'), ('6d', '8d'), ('6d', '9d'), ('6d', 'Td'), ('6d', 'Jd'), ('6d', 'Qd'), ('6d', 'Kd'), ('6d', 'Ad'), ('6h', '8h'), ('6h', '9h'), ('6h', 'Th'), ('6h', 'Jh'), ('6h', 'Qh'), ('6h', 'Kh'), ('6h', 'Ah'), ('6s', '8s'), ('6s', '9s'), ('6s', 'Ts'), ('6s', 'Js'), ('6s', 'Qs'), ('6s', 'Ks'), ('6s', 'As'), ('7c', '9c'), ('7c', 'Tc'), ('7c', 'Jc'), ('7c', 'Qc'), ('7c', 'Kc'), ('7c', 'Ac'), ('7d', '9d'), ('7d', 'Td'), ('7d', 'Jd'), ('7d', 'Qd'), ('7d', 'Kd'), ('7d', 'Ad'), ('7h', '9h'), ('7h', 'Th'), ('7h', 'Jh'), ('7h', 'Qh'), ('7h', 'Kh'), ('7h', 'Ah'), ('7s', '9s'), ('7s', 'Ts'), ('7s', 'Js'), ('7s', 'Qs'), ('7s', 'Ks'), ('7s', 'As'), ('8c', 'Tc'), ('8c', 'Jc'), ('8c', 'Qc'), ('8c', 'Kc'), ('8c', 'Ac'), ('8d', 'Td'), ('8d', 'Jd'), ('8d', 'Qd'), ('8d', 'Kd'), ('8d', 'Ad'), ('8h', 'Th'), ('8h', 'Jh'), ('8h', 'Qh'), ('8h', 'Kh'), ('8h', 'Ah'), ('8s', 'Ts'), ('8s', 'Js'), ('8s', 'Qs'), ('8s', 'Ks'), ('8s', 'As'), ('9c', 'Jc'), ('9c', 'Qc'), ('9c', 'Kc'), ('9c', 'Ac'), ('9d', 'Jd'), ('9d', 'Qd'), ('9d', 'Kd'), ('9d', 'Ad'), ('9h', 'Jh'), ('9h', 'Qh'), ('9h', 'Kh'), ('9h', 'Ah'), ('9s', 'Js'), ('9s', 'Qs'), ('9s', 'Ks'), ('9s', 'As'), ('Tc', 'Qc'), ('Tc', 'Kc'), ('Tc', 'Ac'), ('Td', 'Qd'), ('Td', 'Kd'), ('Td', 'Ad'), ('Th', 'Qh'), ('Th', 'Kh'), ('Th', 'Ah'), ('Ts', 'Qs'), ('Ts', 'Ks'), ('Ts', 'As'), ('Jc', 'Kc'), ('Jc', 'Ac'), ('Jd', 'Kd'), ('Jd', 'Ad'), ('Jh', 'Kh'), ('Jh', 'Ah'), ('Js', 'Ks'), ('Js', 'As'), ('Qc', 'Ac'), ('Qd', 'Ad'), ('Qh', 'Ah'), ('Qs', 'As')], [('2c', '4d'), ('2c', '4h'), ('2c', '4s'), ('2c', '5d'), ('2c', '5h'), ('2c', '5s'), ('2c', '6d'), ('2c', '6h'), ('2c', '6s'), ('2d', '4c'), ('2d', '4h'), ('2d', '4s'), ('2d', '5c'), ('2d', '5h'), ('2d', '5s'), ('2d', '6c'), ('2d', '6h'), ('2d', '6s'), ('2h', '4c'), ('2h', '4d'), ('2h', '4s'), ('2h', '5c'), ('2h', '5d'), ('2h', '5s'), ('2h', '6c'), ('2h', '6d'), ('2h', '6s'), ('2s', '4c'), ('2s', '4d'), ('2s', '4h'), ('2s', '5c'), ('2s', '5d'), ('2s', '5h'), ('2s', '6c'), ('2s', '6d'), ('2s', '6h'), ('3c', '5d'), ('3c', '5h'), ('3c', '5s'), ('3c', '6d'), ('3c', '6h'), ('3c', '6s'), ('3c', '7d'), ('3c', '7h'), ('3c', '7s'), ('3d', '5c'), ('3d', '5h'), ('3d', '5s'), ('3d', '6c'), ('3d', '6h'), ('3d', '6s'), ('3d', '7c'), ('3d', '7h'), ('3d', '7s'), ('3h', '5c'), ('3h', '5d'), ('3h', '5s'), ('3h', '6c'), ('3h', '6d'), ('3h', '6s'), ('3h', '7c'), ('3h', '7d'), ('3h', '7s'), ('3s', '5c'), ('3s', '5d'), ('3s', '5h'), ('3s', '6c'), ('3s', '6d'), ('3s', '6h'), ('3s', '7c'), ('3s', '7d'), ('3s', '7h'), ('4c', '6d'), ('4c', '6h'), ('4c', '6s'), ('4c', '7d'), ('4c', '7h'), ('4c', '7s'), ('4c', '8d'), ('4c', '8h'), ('4c', '8s'), ('4d', '6c'), ('4d', '6h'), ('4d', '6s'), ('4d', '7c'), ('4d', '7h'), ('4d', '7s'), ('4d', '8c'), ('4d', '8h'), ('4d', '8s'), ('4h', '6c'), ('4h', '6d'), ('4h', '6s'), ('4h', '7c'), ('4h', '7d'), ('4h', '7s'), ('4h', '8c'), ('4h', '8d'), ('4h', '8s'), ('4s', '6c'), ('4s', '6d'), ('4s', '6h'), ('4s', '7c'), ('4s', '7d'), ('4s', '7h'), ('4s', '8c'), ('4s', '8d'), ('4s', '8h'), ('5c', '7d'), ('5c', '7h'), ('5c', '7s'), ('5c', '8d'), ('5c', '8h'), ('5c', '8s'), ('5c', '9d'), ('5c', '9h'), ('5c', '9s'), ('5d', '7c'), ('5d', '7h'), ('5d', '7s'), ('5d', '8c'), ('5d', '8h'), ('5d', '8s'), ('5d', '9c'), ('5d', '9h'), ('5d', '9s'), ('5h', '7c'), ('5h', '7d'), ('5h', '7s'), ('5h', '8c'), ('5h', '8d'), ('5h', '8s'), ('5h', '9c'), ('5h', '9d'), ('5h', '9s'), ('5s', '7c'), ('5s', '7d'), ('5s', '7h'), ('5s', '8c'), ('5s', '8d'), ('5s', '8h'), ('5s', '9c'), ('5s', '9d'), ('5s', '9h'), ('6c', '8d'), ('6c', '8h'), ('6c', '8s'), ('6c', '9d'), ('6c', '9h'), ('6c', '9s'), ('6c', 'Td'), ('6c', 'Th'), ('6c', 'Ts'), ('6d', '8c'), ('6d', '8h'), ('6d', '8s'), ('6d', '9c'), ('6d', '9h'), ('6d', '9s'), ('6d', 'Tc'), ('6d', 'Th'), ('6d', 'Ts'), ('6h', '8c'), ('6h', '8d'), ('6h', '8s'), ('6h', '9c'), ('6h', '9d'), ('6h', '9s'), ('6h', 'Tc'), ('6h', 'Td'), ('6h', 'Ts'), ('6s', '8c'), ('6s', '8d'), ('6s', '8h'), ('6s', '9c'), ('6s', '9d'), ('6s', '9h'), ('6s', 'Tc'), ('6s', 'Td'), ('6s', 'Th'), ('7c', '9d'), ('7c', '9h'), ('7c', '9s'), ('7c', 'Td'), ('7c', 'Th'), ('7c', 'Ts'), ('7c', 'Jd'), ('7c', 'Jh'), ('7c', 'Js'), ('7d', '9c'), ('7d', '9h'), ('7d', '9s'), ('7d', 'Tc'), ('7d', 'Th'), ('7d', 'Ts'), ('7d', 'Jc'), ('7d', 'Jh'), ('7d', 'Js'), ('7h', '9c'), ('7h', '9d'), ('7h', '9s'), ('7h', 'Tc'), ('7h', 'Td'), ('7h', 'Ts'), ('7h', 'Jc'), ('7h', 'Jd'), ('7h', 'Js'), ('7s', '9c'), ('7s', '9d'), ('7s', '9h'), ('7s', 'Tc'), ('7s', 'Td'), ('7s', 'Th'), ('7s', 'Jc'), ('7s', 'Jd'), ('7s', 'Jh'), ('8c', 'Td'), ('8c', 'Th'), ('8c', 'Ts'), ('8c', 'Jd'), ('8c', 'Jh'), ('8c', 'Js'), ('8c', 'Qd'), ('8c', 'Qh'), ('8c', 'Qs'), ('8d', 'Tc'), ('8d', 'Th'), ('8d', 'Ts'), ('8d', 'Jc'), ('8d', 'Jh'), ('8d', 'Js'), ('8d', 'Qc'), ('8d', 'Qh'), ('8d', 'Qs'), ('8h', 'Tc'), ('8h', 'Td'), ('8h', 'Ts'), ('8h', 'Jc'), ('8h', 'Jd'), ('8h', 'Js'), ('8h', 'Qc'), ('8h', 'Qd'), ('8h', 'Qs'), ('8s', 'Tc'), ('8s', 'Td'), ('8s', 'Th'), ('8s', 'Jc'), ('8s', 'Jd'), ('8s', 'Jh'), ('8s', 'Qc'), ('8s', 'Qd'), ('8s', 'Qh'), ('9c', 'Jd'), ('9c', 'Jh'), ('9c', 'Js'), ('9c', 'Qd'), ('9c', 'Qh'), ('9c', 'Qs'), ('9c', 'Kd'), ('9c', 'Kh'), ('9c', 'Ks'), ('9d', 'Jc'), ('9d', 'Jh'), ('9d', 'Js'), ('9d', 'Qc'), ('9d', 'Qh'), ('9d', 'Qs'), ('9d', 'Kc'), ('9d', 'Kh'), ('9d', 'Ks'), ('9h', 'Jc'), ('9h', 'Jd'), ('9h', 'Js'), ('9h', 'Qc'), ('9h', 'Qd'), ('9h', 'Qs'), ('9h', 'Kc'), ('9h', 'Kd'), ('9h', 'Ks'), ('9s', 'Jc'), ('9s', 'Jd'), ('9s', 'Jh'), ('9s', 'Qc'), ('9s', 'Qd'), ('9s', 'Qh'), ('9s', 'Kc'), ('9s', 'Kd'), ('9s', 'Kh'), ('Tc', 'Qd'), ('Tc', 'Qh'), ('Tc', 'Qs'), ('Tc', 'Kd'), ('Tc', 'Kh'), ('Tc', 'Ks'), ('Tc', 'Ad'), ('Tc', 'Ah'), ('Tc', 'As'), ('Td', 'Qc'), ('Td', 'Qh'), ('Td', 'Qs'), ('Td', 'Kc'), ('Td', 'Kh'), ('Td', 'Ks'), ('Td', 'Ac'), ('Td', 'Ah'), ('Td', 'As'), ('Th', 'Qc'), ('Th', 'Qd'), ('Th', 'Qs'), ('Th', 'Kc'), ('Th', 'Kd'), ('Th', 'Ks'), ('Th', 'Ac'), ('Th', 'Ad'), ('Th', 'As'), ('Ts', 'Qc'), ('Ts', 'Qd'), ('Ts', 'Qh'), ('Ts', 'Kc'), ('Ts', 'Kd'), ('Ts', 'Kh'), ('Ts', 'Ac'), ('Ts', 'Ad'), ('Ts', 'Ah'), ('Jc', 'Kd'), ('Jc', 'Kh'), ('Jc', 'Ks'), ('Jc', 'Ad'), ('Jc', 'Ah'), ('Jc', 'As'), ('Jd', 'Kc'), ('Jd', 'Kh'), ('Jd', 'Ks'), ('Jd', 'Ac'), ('Jd', 'Ah'), ('Jd', 'As'), ('Jh', 'Kc'), ('Jh', 'Kd'), ('Jh', 'Ks'), ('Jh', 'Ac'), ('Jh', 'Ad'), ('Jh', 'As'), ('Js', 'Kc'), ('Js', 'Kd'), ('Js', 'Kh'), ('Js', 'Ac'), ('Js', 'Ad'), ('Js', 'Ah'), ('Qc', 'Ad'), ('Qc', 'Ah'), ('Qc', 'As'), ('Qd', 'Ac'), ('Qd', 'Ah'), ('Qd', 'As'), ('Qh', 'Ac'), ('Qh', 'Ad'), ('Qh', 'As'), ('Qs', 'Ac'), ('Qs', 'Ad'), ('Qs', 'Ah')], [('2c', '7d'), ('2c', '7h'), ('2c', '7s'), ('2c', '8d'), ('2c', '8h'), ('2c', '8s'), ('2c', '9d'), ('2c', '9h'), ('2c', '9s'), ('2c', 'Td'), ('2c', 'Th'), ('2c', 'Ts'), ('2c', 'Jd'), ('2c', 'Jh'), ('2c', 'Js'), ('2c', 'Qd'), ('2c', 'Qh'), ('2c', 'Qs'), ('2c', 'Kd'), ('2c', 'Kh'), ('2c', 'Ks'), ('2c', 'Ad'), ('2c', 'Ah'), ('2c', 'As'), ('2d', '7c'), ('2d', '7h'), ('2d', '7s'), ('2d', '8c'), ('2d', '8h'), ('2d', '8s'), ('2d', '9c'), ('2d', '9h'), ('2d', '9s'), ('2d', 'Tc'), ('2d', 'Th'), ('2d', 'Ts'), ('2d', 'Jc'), ('2d', 'Jh'), ('2d', 'Js'), ('2d', 'Qc'), ('2d', 'Qh'), ('2d', 'Qs'), ('2d', 'Kc'), ('2d', 'Kh'), ('2d', 'Ks'), ('2d', 'Ac'), ('2d', 'Ah'), ('2d', 'As'), ('2h', '7c'), ('2h', '7d'), ('2h', '7s'), ('2h', '8c'), ('2h', '8d'), ('2h', '8s'), ('2h', '9c'), ('2h', '9d'), ('2h', '9s'), ('2h', 'Tc'), ('2h', 'Td'), ('2h', 'Ts'), ('2h', 'Jc'), ('2h', 'Jd'), ('2h', 'Js'), ('2h', 'Qc'), ('2h', 'Qd'), ('2h', 'Qs'), ('2h', 'Kc'), ('2h', 'Kd'), ('2h', 'Ks'), ('2h', 'Ac'), ('2h', 'Ad'), ('2h', 'As'), ('2s', '7c'), ('2s', '7d'), ('2s', '7h'), ('2s', '8c'), ('2s', '8d'), ('2s', '8h'), ('2s', '9c'), ('2s', '9d'), ('2s', '9h'), ('2s', 'Tc'), ('2s', 'Td'), ('2s', 'Th'), ('2s', 'Jc'), ('2s', 'Jd'), ('2s', 'Jh'), ('2s', 'Qc'), ('2s', 'Qd'), ('2s', 'Qh'), ('2s', 'Kc'), ('2s', 'Kd'), ('2s', 'Kh'), ('2s', 'Ac'), ('2s', 'Ad'), ('2s', 'Ah'), ('3c', '8d'), ('3c', '8h'), ('3c', '8s'), ('3c', '9d'), ('3c', '9h'), ('3c', '9s'), ('3c', 'Td'), ('3c', 'Th'), ('3c', 'Ts'), ('3c', 'Jd'), ('3c', 'Jh'), ('3c', 'Js'), ('3c', 'Qd'), ('3c', 'Qh'), ('3c', 'Qs'), ('3c', 'Kd'), ('3c', 'Kh'), ('3c', 'Ks'), ('3c', 'Ad'), ('3c', 'Ah'), ('3c', 'As'), ('3d', '8c'), ('3d', '8h'), ('3d', '8s'), ('3d', '9c'), ('3d', '9h'), ('3d', '9s'), ('3d', 'Tc'), ('3d', 'Th'), ('3d', 'Ts'), ('3d', 'Jc'), ('3d', 'Jh'), ('3d', 'Js'), ('3d', 'Qc'), ('3d', 'Qh'), ('3d', 'Qs'), ('3d', 'Kc'), ('3d', 'Kh'), ('3d', 'Ks'), ('3d', 'Ac'), ('3d', 'Ah'), ('3d', 'As'), ('3h', '8c'), ('3h', '8d'), ('3h', '8s'), ('3h', '9c'), ('3h', '9d'), ('3h', '9s'), ('3h', 'Tc'), ('3h', 'Td'), ('3h', 'Ts'), ('3h', 'Jc'), ('3h', 'Jd'), ('3h', 'Js'), ('3h', 'Qc'), ('3h', 'Qd'), ('3h', 'Qs'), ('3h', 'Kc'), ('3h', 'Kd'), ('3h', 'Ks'), ('3h', 'Ac'), ('3h', 'Ad'), ('3h', 'As'), ('3s', '8c'), ('3s', '8d'), ('3s', '8h'), ('3s', '9c'), ('3s', '9d'), ('3s', '9h'), ('3s', 'Tc'), ('3s', 'Td'), ('3s', 'Th'), ('3s', 'Jc'), ('3s', 'Jd'), ('3s', 'Jh'), ('3s', 'Qc'), ('3s', 'Qd'), ('3s', 'Qh'), ('3s', 'Kc'), ('3s', 'Kd'), ('3s', 'Kh'), ('3s', 'Ac'), ('3s', 'Ad'), ('3s', 'Ah'), ('4c', '9d'), ('4c', '9h'), ('4c', '9s'), ('4c', 'Td'), ('4c', 'Th'), ('4c', 'Ts'), ('4c', 'Jd'), ('4c', 'Jh'), ('4c', 'Js'), ('4c', 'Qd'), ('4c', 'Qh'), ('4c', 'Qs'), ('4c', 'Kd'), ('4c', 'Kh'), ('4c', 'Ks'), ('4c', 'Ad'), ('4c', 'Ah'), ('4c', 'As'), ('4d', '9c'), ('4d', '9h'), ('4d', '9s'), ('4d', 'Tc'), ('4d', 'Th'), ('4d', 'Ts'), ('4d', 'Jc'), ('4d', 'Jh'), ('4d', 'Js'), ('4d', 'Qc'), ('4d', 'Qh'), ('4d', 'Qs'), ('4d', 'Kc'), ('4d', 'Kh'), ('4d', 'Ks'), ('4d', 'Ac'), ('4d', 'Ah'), ('4d', 'As'), ('4h', '9c'), ('4h', '9d'), ('4h', '9s'), ('4h', 'Tc'), ('4h', 'Td'), ('4h', 'Ts'), ('4h', 'Jc'), ('4h', 'Jd'), ('4h', 'Js'), ('4h', 'Qc'), ('4h', 'Qd'), ('4h', 'Qs'), ('4h', 'Kc'), ('4h', 'Kd'), ('4h', 'Ks'), ('4h', 'Ac'), ('4h', 'Ad'), ('4h', 'As'), ('4s', '9c'), ('4s', '9d'), ('4s', '9h'), ('4s', 'Tc'), ('4s', 'Td'), ('4s', 'Th'), ('4s', 'Jc'), ('4s', 'Jd'), ('4s', 'Jh'), ('4s', 'Qc'), ('4s', 'Qd'), ('4s', 'Qh'), ('4s', 'Kc'), ('4s', 'Kd'), ('4s', 'Kh'), ('4s', 'Ac'), ('4s', 'Ad'), ('4s', 'Ah'), ('5c', 'Td'), ('5c', 'Th'), ('5c', 'Ts'), ('5c', 'Jd'), ('5c', 'Jh'), ('5c', 'Js'), ('5c', 'Qd'), ('5c', 'Qh'), ('5c', 'Qs'), ('5c', 'Kd'), ('5c', 'Kh'), ('5c', 'Ks'), ('5c', 'Ad'), ('5c', 'Ah'), ('5c', 'As'), ('5d', 'Tc'), ('5d', 'Th'), ('5d', 'Ts'), ('5d', 'Jc'), ('5d', 'Jh'), ('5d', 'Js'), ('5d', 'Qc'), ('5d', 'Qh'), ('5d', 'Qs'), ('5d', 'Kc'), ('5d', 'Kh'), ('5d', 'Ks'), ('5d', 'Ac'), ('5d', 'Ah'), ('5d', 'As'), ('5h', 'Tc'), ('5h', 'Td'), ('5h', 'Ts'), ('5h', 'Jc'), ('5h', 'Jd'), ('5h', 'Js'), ('5h', 'Qc'), ('5h', 'Qd'), ('5h', 'Qs'), ('5h', 'Kc'), ('5h', 'Kd'), ('5h', 'Ks'), ('5h', 'Ac'), ('5h', 'Ad'), ('5h', 'As'), ('5s', 'Tc'), ('5s', 'Td'), ('5s', 'Th'), ('5s', 'Jc'), ('5s', 'Jd'), ('5s', 'Jh'), ('5s', 'Qc'), ('5s', 'Qd'), ('5s', 'Qh'), ('5s', 'Kc'), ('5s', 'Kd'), ('5s', 'Kh'), ('5s', 'Ac'), ('5s', 'Ad'), ('5s', 'Ah'), ('6c', 'Jd'), ('6c', 'Jh'), ('6c', 'Js'), ('6c', 'Qd'), ('6c', 'Qh'), ('6c', 'Qs'), ('6c', 'Kd'), ('6c', 'Kh'), ('6c', 'Ks'), ('6c', 'Ad'), ('6c', 'Ah'), ('6c', 'As'), ('6d', 'Jc'), ('6d', 'Jh'), ('6d', 'Js'), ('6d', 'Qc'), ('6d', 'Qh'), ('6d', 'Qs'), ('6d', 'Kc'), ('6d', 'Kh'), ('6d', 'Ks'), ('6d', 'Ac'), ('6d', 'Ah'), ('6d', 'As'), ('6h', 'Jc'), ('6h', 'Jd'), ('6h', 'Js'), ('6h', 'Qc'), ('6h', 'Qd'), ('6h', 'Qs'), ('6h', 'Kc'), ('6h', 'Kd'), ('6h', 'Ks'), ('6h', 'Ac'), ('6h', 'Ad'), ('6h', 'As'), ('6s', 'Jc'), ('6s', 'Jd'), ('6s', 'Jh'), ('6s', 'Qc'), ('6s', 'Qd'), ('6s', 'Qh'), ('6s', 'Kc'), ('6s', 'Kd'), ('6s', 'Kh'), ('6s', 'Ac'), ('6s', 'Ad'), ('6s', 'Ah'), ('7c', 'Qd'), ('7c', 'Qh'), ('7c', 'Qs'), ('7c', 'Kd'), ('7c', 'Kh'), ('7c', 'Ks'), ('7c', 'Ad'), ('7c', 'Ah'), ('7c', 'As'), ('7d', 'Qc'), ('7d', 'Qh'), ('7d', 'Qs'), ('7d', 'Kc'), ('7d', 'Kh'), ('7d', 'Ks'), ('7d', 'Ac'), ('7d', 'Ah'), ('7d', 'As'), ('7h', 'Qc'), ('7h', 'Qd'), ('7h', 'Qs'), ('7h', 'Kc'), ('7h', 'Kd'), ('7h', 'Ks'), ('7h', 'Ac'), ('7h', 'Ad'), ('7h', 'As'), ('7s', 'Qc'), ('7s', 'Qd'), ('7s', 'Qh'), ('7s', 'Kc'), ('7s', 'Kd'), ('7s', 'Kh'), ('7s', 'Ac'), ('7s', 'Ad'), ('7s', 'Ah'), ('8c', 'Kd'), ('8c', 'Kh'), ('8c', 'Ks'), ('8c', 'Ad'), ('8c', 'Ah'), ('8c', 'As'), ('8d', 'Kc'), ('8d', 'Kh'), ('8d', 'Ks'), ('8d', 'Ac'), ('8d', 'Ah'), ('8d', 'As'), ('8h', 'Kc'), ('8h', 'Kd'), ('8h', 'Ks'), ('8h', 'Ac'), ('8h', 'Ad'), ('8h', 'As'), ('8s', 'Kc'), ('8s', 'Kd'), ('8s', 'Kh'), ('8s', 'Ac'), ('8s', 'Ad'), ('8s', 'Ah'), ('9c', 'Ad'), ('9c', 'Ah'), ('9c', 'As'), ('9d', 'Ac'), ('9d', 'Ah'), ('9d', 'As'), ('9h', 'Ac'), ('9h', 'Ad'), ('9h', 'As'), ('9s', 'Ac'), ('9s', 'Ad'), ('9s', 'Ah')]]
    for i in range(len(preflop_type)):
        for hand in preflop_type[i]:
            if hole_cards[0] in hand and hole_cards[1] in hand:
                return preflop_buckets[i]

def bucket_postflop_cards(hole_cards, board_cards):
    """
    Takes in hole cards and board cards and returns what postflop bucket they belong to
    """
    hand_strength = get_hand_strength(hole_cards, board_cards)
    if hand_strength <= .2:
        return postflop_buckets[0]
    elif hand_strength > .2 and hand_strength <= .4:
        return postflop_buckets[1]
    elif hand_strength > .4 and hand_strength <= .6:
        return postflop_buckets[2]
    elif hand_strength > .6 and hand_strength <= .8:
        return postflop_buckets[3]
    else:
        return postflop_buckets[4]

def get_hand_strength(hole_cards, board_cards):
    """
    Takes in hole cards and board cards and returns the hand strength.
    """
    evaluator=Evaluator()
    hole=[Card.new(hole_cards[0]), Card.new(hole_cards[1])]
    board=[]
    for card in board_cards:
        board.append(Card.new(card))
    strength=(7643-evaluator.evaluate(hole, board))/float(7642)
    return strength

def get_strength_difference(hole_cards_1, hole_cards_2, board_cards):
    """
    Takes in the hole cards and the board cards and returns the difference in hand strength between player one and
    player two.
    """
    evaluator=Evaluator()
    hole_1=[Card.new(hole_cards_1[0]), Card.new(hole_cards_1[1])]
    hole_2=[Card.new(hole_cards_2[0]), Card.new(hole_cards_2[1])]
    board=[]
    for card in board_cards:
        board.append(Card.new(card))
    strength_1=(7643-evaluator.evaluate(hole_1, board))/float(7642)
    strength_2=(7643-evaluator.evaluate(hole_2, board))/float(7642)
    return strength_1-strength_2

def four_random_cards(deck):
    random_cards=[]
    while len(random_cards)<4:
        r=random.randint(0, len(deck)-1)
        if deck[r] not in random_cards:
            random_cards.append(deck[r])
    return random_cards

def main():
    """
    Runs iterations of counterfactual regret minimization.
    """
    #i_map = {}  # A list of all information sets (game histories)

    filename = "game_strategies2"  # The file that holds the odds of being dealt a card from a given bucket
    file = bz2.BZ2File(filename, "rb")
    i_map = pickle.load(file)
    file.close()

    n_iterations = 1000000  # Number of times to run the algorithm
    expected_game_value = 0
    for i in range(n_iterations):
        random=four_random_cards(deck)
        hole_cards_1=[random[0], random[1]]
        hole_cards_2=[random[2], random[3]]
        flop=generate_random_flop(hole_cards_1, hole_cards_2)
        river=generate_random_river(hole_cards_1, hole_cards_2, flop)
        board_cards=generate_random_turn(hole_cards_1, hole_cards_2, river)
        print("Iteration: ", i, "Cards: ", hole_cards_1, hole_cards_2, board_cards, "Expected value: ", expected_game_value)
        expected_game_value += cfr(i_map, history=[], hole_cards_1=hole_cards_1, hole_cards_2=hole_cards_2, board_cards=board_cards)

        for key, value in i_map.items():  # Loops through all information sets
            value.next_strategy()  # Updates probability of performing that given action

        save_imap(i_map)
        save_results(i_map)  # Saves the outcome of cfr after every iteration

    print(display_results(expected_game_value / float(n_iterations), i_map))  # Prints the outcome of the entire iteration of cfr
    save_imap(i_map)
    save_results(i_map)  # Saves the outcome of cfr after it is complete

def cfr(i_map, history, hole_cards_1, hole_cards_2, board_cards, pot_size=3, contrib_1=1, contrib_2=2, pr_1=1.0, pr_2=1.0, pr_c=1.0, is_sb=True):
    """
    This function does the bulk of CFR calculations. History is the list containing all moves made up to this point, hole cards 1 and 2 are the
    hole cards being held by each player, pot_size is how much money is in the pot, contrib 1 and 2 are how much each player has contributed to the
    pot, pr_1 and pr_2 are the probabilities that each player reaches this point in the game history, and pr_c is the probability that the chance
    nodes lead us to this point in the game history.
    """
    if is_chance_node(history): #If it is the start of a hand or the end of a round of betting, time to deal cards
        return get_chance_util(i_map, history, hole_cards_1, hole_cards_2, board_cards, pot_size, contrib_1, contrib_2, pr_1, pr_2, pr_c, is_sb)

    if is_terminal_node(history): #If the hand ended
        return get_terminal_util(history, hole_cards_1, hole_cards_2, board_cards, pot_size, contrib_1, contrib_2, is_sb)

    is_sb=get_is_sb(history) #Is it the small blinds turn to bet

    info_set = get_info_set(i_map, history, hole_cards_1 if is_sb else hole_cards_2, board_cards, get_legal_moves(history, pot_size, contrib_1, contrib_2, is_sb), is_sb) #Gets the strategy for this game state from I-map if it exists, otherwise adds the strategy to i_map
    strategy = info_set.strategy

    if is_sb:
        info_set.reach_pr += pr_1
    else:
        info_set.reach_pr += pr_2

    action_utils = np.zeros(len(action_buckets))  # Counterfactual utility per action

    for i in range(len(action_buckets)): #Loop through all actions
        action=action_buckets[i]
        if is_legal_move(history, action, pot_size, contrib_1, contrib_2, is_sb): #If the action is legal
            if is_sb: #If the small blind is going
                next_history = history[:]
                next_history.append(action)
                multiplier=-1
                if is_terminal_node(next_history): #If the action that is being looked at results in a terminal node, do not inverse the value of the utility
                    multiplier=1
                elif get_is_sb(next_history): #If you are looking at the utility of an action made by you, do not multiply its value by -1
                    multiplier=1
                new_pot = get_new_pot(action, pot_size, contrib_1, contrib_2, is_sb)
                action_utils[i]=multiplier*cfr(i_map, next_history, hole_cards_1, hole_cards_2, board_cards, new_pot[0], new_pot[1], new_pot[2], pr_1*strategy[i], pr_2, pr_c, is_sb)
            else: #If the big blind is going
                next_history = history[:]
                next_history.append("-"+action)
                multiplier=-1
                if is_terminal_node(next_history): #If the action that is being looked at results in a terminal node, do not inverse the value of the utility
                    multiplier=1
                elif not get_is_sb(next_history): #If you are looking at the utility of an action made by you, do not multiply its value by -1
                    multiplier=1
                new_pot = get_new_pot(action, pot_size, contrib_1, contrib_2, is_sb)
                action_utils[i]=multiplier*cfr(i_map, next_history, hole_cards_1, hole_cards_2, board_cards, new_pot[0], new_pot[1], new_pot[2], pr_1, pr_2*strategy[i], pr_c, is_sb)

    util=sum(action_utils*strategy) #Sum up the utility. For each action, odds of you choosing that action times the expected utility of choosing it
    regrets = action_utils - util

    legal_moves=get_legal_moves(history, pot_size, contrib_1, contrib_2, is_sb)
    if is_sb:
        for i in range(len(legal_moves)):  # Zero's out any non-legal moves
            if legal_moves[i] == True:
                info_set.regret_sum[i] += pr_2 * pr_c * regrets[i]
    else:
        for i in range(len(legal_moves)):  # Zero's out any non-legal moves
            if legal_moves[i] == True:
                info_set.regret_sum[i] += pr_1 * pr_c * regrets[i]
    return util

def is_chance_node(history):
    """
    Takes in a game history and determines whether or not the next node is a chance node.
    """
    if len(history)==0: #If the hole cards have not been dealt yet
        return True
    if not is_turn(history) and is_betting_over(history): #If a round of betting is over and it is not the river
        return True
    else:
        return False

def is_terminal_node(history):
    """
    Takes in a game history and determines whether or not it is a terminal node.
    """
    if history[-1]=="0" or history[-1]=="-0": #Last move was a fold (negative indicates move by big blind)
        return True
    elif is_turn(history): #If the game didnt end on a fold it is only a terminal node at the river
        if is_betting_over(history):
            return True
        else:
            return False
    else:
        return False

def get_chance_util(i_map, history, hole_cards_1, hole_cards_2, board_cards, pot_size, contrib_1, contrib_2, pr_1, pr_2, pr_c, is_sb):
    """
    Returns the chance utility at the initial preflop chance nodes.
    """
    expected_value=0
    new_history=history[:]
    new_history+=["r", "r"]
    hand = [hole_cards_1[0], hole_cards_1[1]]
    opponent_hand = [hole_cards_2[0], hole_cards_2[1]]
    flop=board_cards[:3]
    river=board_cards[:4]
    turn=board_cards[:5]
    bucket_1 = bucket_preflop_cards(hand)  # What preflop bucket the small blinds hand falls into
    bucket_2 = bucket_preflop_cards(opponent_hand)  # What preflop bucket the big blinds hand falls into
    flop_bucket_1 = bucket_postflop_cards(hole_cards_1, flop)
    flop_bucket_2 = bucket_postflop_cards(hole_cards_2, flop)
    river_bucket_1 = bucket_postflop_cards(hole_cards_1, river)
    river_bucket_2 = bucket_postflop_cards(hole_cards_2, river)
    turn_bucket_1 = bucket_postflop_cards(hole_cards_1, turn)
    turn_bucket_2 = bucket_postflop_cards(hole_cards_2, turn)
    if len(history)==0:
        chance = preflop_bucket_odds[int(bucket_1)] * preflop_bucket_odds[int(bucket_2)]  # The odds of the opponent hand and the hand being in their respective buckets
    if is_preflop(history): #The flop just came down
        chance=preflop_bucket_odds[int(bucket_1)] * preflop_bucket_odds[int(bucket_2)]*postflop_bucket_odds[int(bucket_1)][int(flop_bucket_1)]*postflop_bucket_odds[int(bucket_2)][int(flop_bucket_2)]
    if is_flop(history): #The river just came down
        chance=preflop_bucket_odds[int(bucket_1)] * preflop_bucket_odds[int(bucket_2)]*postflop_bucket_odds[int(bucket_1)][int(flop_bucket_1)]*postflop_bucket_odds[int(bucket_2)][int(flop_bucket_2)]*postflop_bucket_odds[int(bucket_1)][int(river_bucket_1)]*postflop_bucket_odds[int(bucket_2)][int(river_bucket_2)]
    if is_river(history):
        chance=preflop_bucket_odds[int(bucket_1)] * preflop_bucket_odds[int(bucket_2)]*postflop_bucket_odds[int(bucket_1)][int(flop_bucket_1)]*postflop_bucket_odds[int(bucket_2)][int(flop_bucket_2)]*postflop_bucket_odds[int(bucket_1)][int(river_bucket_1)]*postflop_bucket_odds[int(bucket_2)][int(river_bucket_2)]*postflop_bucket_odds[int(bucket_1)][int(turn_bucket_1)]*postflop_bucket_odds[int(bucket_2)][int(turn_bucket_2)]
    expected_value+=cfr(i_map, new_history, hand, opponent_hand, board_cards, pot_size, contrib_1, contrib_2, pr_1, pr_2, chance, is_sb)  # r is a chance node
    return expected_value #Taper expected value by the odds of actually reaching this point in the game

def get_terminal_util(history, hole_cards_1, hole_cards_2, board_cards, pot_size, contrib_1, contrib_2, is_sb):
    """
    Returns the utility whenever a hand is over. Note: Pot size is always contrib_1+contrib_2
    """
    if history[-1]=="-0": #It is the big blinds turn and they chose to fold
        return -(contrib_2)
    elif history[-1]=="0": #If the small blind folded
        return -(contrib_1)
    else: #If it went to a showdown
        strength_difference=get_strength_difference(hole_cards_1, hole_cards_2, board_cards)
        if strength_difference>0: #If the small blind won
            if is_sb: #The small blind made this move and they won so utility is positive
                return contrib_2 #Small blind wins whatever big blind put in the pot
            else: #The big blind made this move and they lost so utility is negative
                return -(contrib_2) #Big blind loses whatever they put in the pot
        elif strength_difference<0: #If the big blind won
            if is_sb: #The small blind made this move and they lost so utility is negative
                return -(contrib_1) #Small blind loses whatever they put in the pot
            else: #The big blind made this move and they won so utility is positive
                return contrib_1 #Big blind wins whatever they put in the pot
        else: #The small blind and big blind tied
            return 0

def get_is_sb(history):
    """
    Returns whether or not it is the small blinds turn to bet or the big blinds. Accounts for the change in the order of
    betting after the preflop betting round as well as possible double actions such as check-check and check-call.
    """
    if len(history)==0: #Small blind alway goes first in a game
        return True
    if is_preflop(history):
        if history[-2:] == ["r", "r"]:  # Small blind always bets first preflop
            return True
        if history==["r", "r", "2", "-1"]: #If it is the preflop and the small blind calls then the big blind checks, the big blind gets to go again for a check-check
            return False
        if history==["r", "r", "3", "-2"] or history==["r", "r", "4", "-2"]: #After an initial preflop raise by the small blind and a call by the big blind, the big blind can call-check
            return False
        else:
            return "-" in history[-1] #If it is none of the above scenarios, the small blind gets to go if the big blind just went
    else:
        if history[-2:] == ["r", "r"]:  # Big blind always bets first postflop
            return False
        if not is_turn(history): #Not the preflop and not the turn
            if history[-5:]==["r", "r", "-1", "5", "-2"] or history[-5:]==["r", "r", "-1", "6", "-2"]: #If the big blind checks then the small blind bets then the big blind calls you can call-check
                return False
            if history[-7:]==["r", "r", "-1", "5", "-3", "3", "-2"]: #All of the following if statements are variations of the check, bet, raise, raise, call combo
                return False
            if history[-7:]==["r", "r", "-1", "5", "-3", "4", "-2"]:
                return False
            if history[-7:]==["r", "r", "-1", "5", "-4", "3", "-2"]:
                return False
            if history[-7:]==["r", "r", "-1", "5", "-4", "4", "-2"]:
                return False
            if history[-7:]==["r", "r", "-1", "6", "-3", "3", "-2"]:
                return False
            if history[-7:]==["r", "r", "-1", "6", "-3", "4", "-2"]:
                return False
            if history[-7:]==["r", "r", "-1", "6", "-4", "3", "-2"]:
                return False
            if history[-7:]==["r", "r", "-1", "6", "-4", "4", "-2"]:
                return False
        return "-" in history[-1] #If it is none of the above scenarios, the small blind gets to go if the big blind just went

def is_betting_over(history):
    """
    Takes in a game history and determines whether or not the round of betting is over.
    """
    if history[-2:]==["1", "-1"] or history[-2:]==["-1", "1"]: #If the last two moves of the game were checks
        return True
    elif is_turn(history):
        if history[-1]=="2" or history[-1]=="-2": #Betting is over in the river if someone calls
            return True
    else:
        return False

def is_preflop(history):
    """
    Takes in a game history and returns whether or not it is the preflop based on the number of chance nodes. Chance nodes
    are represented as "r".
    """
    return history.count("r")==2 #Two chance nodes at the start of the game and two each time new board cards are played

def is_flop(history):
    """
    Takes in a game history and returns whether or not it is the flop based on the number of chance nodes. Chance nodes
    are represented as "r".
    """
    return history.count("r")==4 #Two chance nodes at the start of the game and two each time new board cards are played

def is_river(history):
    """
    Takes in a game history and returns whether or not it is the river based on the number of chance nodes. Chance nodes
    are represented as "r".
    """
    return history.count("r")==6 #Two chance nodes at the start of the game and two each time new board cards are played

def is_turn(history):
    """
    Takes in a game history and returns whether or not it is the turn based on the number of chance nodes. Chance nodes
    are represented as "r".
    """
    return history.count("r")==8 #Two chance nodes at the start of the game and two each time new board cards are played

def is_legal_move(history, action, pot_size, contrib_1, contrib_2, is_sb):
    """
    Returns whether or not a given action is legal at this point in the game. Takes in a game history and the same
    other parameters as get_new_pot.
    """
    if action=="0": #Fold
        if is_preflop(history): #Checks first actions in preflop
            if is_sb:
                if history == ['r', 'r']:  #Folding is always allowed as the first move of preflop
                    return True
            else:
                if history[:2] == ['r', 'r'] and len(history)==3:  #Folding is always allowed as the first move of preflop regardless of small blinds action
                    return True
        if is_sb:
            if history[-1]=="-3" or history[-1]=="-4" or history[-1]=="-5" or history[-1]=="-6": #If the last move was a raise or a bet
                return True
            else:
                return False
        else:
            if history[-1]=="3" or history[-1]=="4" or history[-1]=="5" or history[-1]=="6": #If the last move was a raise or a bet
                return True
            else:
                return False

    elif action=="1": #Check or exchange
        if history[-1]=="1" or history[-1]=="-1": #If another player or you just checked, allows for check-check scenarios
            return True
        if history[-1] == "2" or history[-1] == "-2":  # Always able to check after a call and allows for a call-check
            return True
        if not is_preflop(history):
            if is_sb:
                if history[-3:]==["r", "r", "-1"]: #If it is the small blinds first move in a postflop round of betting and the big blind just checked
                    return True
            else:
                if history[-2:]==["r", "r"]: #If it is the big blinds first move in a postflop round of betting
                    return True
        if is_preflop(history):
            if not is_sb:
                if history==["r", "r", "2"]: #If the small blind opened with a call preflop the big blind can check (Sets up check-check scenario)
                    return True

    elif action=="2": #Call
        if is_sb:
            if history == ["r", "r"]:  # The small blind is allowed to call on their first action preflop since they only bet 1
                return True
            if history[-1]=="-3" or history[-1]=="-4" or history[-1]=="-5" or history[-1]=="-6": #If the last move was a raise or a bet
                return True
            else:
                return False
        else:
            if history[-1]=="3" or history[-1]=="4" or history[-1]=="5" or history[-1]=="6": #If the last move was a raise or a bet
                return True
            else:
                return False

    elif action=="3": #Raise half pot
        if is_preflop(history):
            if is_sb:
                if history == ['r', 'r']:  # Raising is always allowed as the first move of preflop
                    return True
            else:
                if history[:2] == ['r', 'r'] and len(history)==3:  #Raising is always allowed as the first move of preflop for the big blind regardless of the small blinds first action
                    return True
        if is_sb:
            cost=int(.5*pot_size)+(pot_size-contrib_1) #Cost to call plus half of the pot
            if cost<=400: #Cannot bet more than 400 in a round
                if num_bets(history, is_sb)<1: #No more than two bets or raises in a given round
                    if history[-1]=="-3" or history[-1]=="-4" or history[-1]=="-5" or history[-1]=="-6": #If the last action by the opponent was a bet or raise
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False
        else:
            cost=int(.5*pot_size)+(pot_size-contrib_2) #Cost to call plus half of the pot
            if cost<=400: #Cannot bet more than 400 in a round
                if num_bets(history, is_sb)<1: #No more than two bets or raises in a given round
                    if history[-1]=="3" or history[-1]=="4" or history[-1]=="5" or history[-1]=="6": #If the last action by the opponent was a bet or raise
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False

    elif action=="4": #Raise full pot
        if is_preflop(history):
            if is_sb:
                if history == ['r', 'r']:  # Raising is always allowed as the first move of preflop
                    return True
            else:
                if history[:2] == ['r', 'r'] and len(history)==3:  #Raising is always allowed as the first move of preflop for the big blind regardless of the small blinds first action
                    return True
        if is_sb:
            cost=pot_size+(pot_size-contrib_1) #Cost to call plus half of the pot
            if cost<=400: #Cannot bet more than 400 in a round
                if num_bets(history, is_sb)<1: #No more than two bets or raises in a given round
                    if history[-1]=="-3" or history[-1]=="-4" or history[-1]=="-5" or history[-1]=="-6": #If the last action by the opponent was a bet or raise
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False
        else:
            cost=pot_size+(pot_size-contrib_2) #Cost to call plus half of the pot
            if cost<=400: #Cannot bet more than 400 in a round
                if num_bets(history, is_sb)<1: #No more than two bets or raises in a given round
                    if history[-1]=="3" or history[-1]=="4" or history[-1]=="5" or history[-1]=="6": #If the last action by the opponent was a bet or raise
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False

    elif action=="5": #Bet half pot
        if not is_preflop(history): #You cannot bet in the preflop
            if is_sb:
                cost=int(.5*pot_size)+contrib_1
                if cost<=400: #You cannot bet more then 400 in a round
                    if history[-1]=="-1" and history[-2]=="r": #Betting is only allowed at the start of a round and small blind bets second so big blind must have checked
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                cost=int(.5*pot_size)+contrib_2
                if cost<=400: #You cannot bet more then 400 in a round
                    if history[-2:]==["r", "r"]: #If it is the first chance for the big blind to bet in a round
                        return True
                    else:
                        return False
                else:
                    return False
        else:
            return False

    else: #Bet full pot
        if not is_preflop(history): #You cannot bet in the preflop
            if is_sb:
                cost=pot_size+contrib_1
                if cost<=400: #You cannot bet more then 400 in a round
                    if history[-1]=="-1" and history[-2]=="r": #Betting is only allowed at the start of a round and small blind bets second so big blind must have checked
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                cost=pot_size+contrib_2
                if cost<=400: #You cannot bet more then 400 in a round
                    if history[-2:]==["r", "r"]: #If it is the first chance for the big blind to bet in a round
                        return True
                    else:
                        return False
                else:
                    return False
        else:
            return False

def get_legal_moves(history, pot_size, contrib_1, contrib_2, is_sb):
    """Returns a list of booleans mapping actions to whether or not they are legal at the current game state."""
    legal_moves=[]
    for action in action_buckets:
        if is_legal_move(history, str(action), pot_size, contrib_1, contrib_2, is_sb):
            legal_moves.append(True)
        else:
            legal_moves.append(False)
    return legal_moves

def get_new_pot(action, pot_size, contrib_1, contrib_2, is_sb):
    """
    Takes in information about the pot and returns all new pot information given the action being taken. Action is the
    action being taken, pot_size is how large the pot is, contrib 1 and 2 are how much each player has added to the pot
    and is_sb is whether or not it is the small blinds turn.
    """
    if action=="0" or action=="1": #Fold, check
        return (pot_size, contrib_1, contrib_2) #These actions cost nothing

    if action=="2": #Calling
        if is_sb:
            cost = contrib_2 - contrib_1  # Cost to call
            return (pot_size+cost, contrib_1+cost, contrib_2)
        else:
            cost = contrib_1 - contrib_2  # Cost to call
            return (pot_size+cost, contrib_1, contrib_2+cost)

    if action=="3": #Raise half the pot
        if is_sb:
            cost=int(.5*pot_size)+(contrib_2-contrib_1) #The amount to call the pot plus half of the pot size
            return (pot_size+cost, contrib_1+cost, contrib_2)
        else:
            cost = int(.5 * pot_size) + (contrib_1 - contrib_2)  #The amount to call the pot plus half of the pot size
            return (pot_size+cost, contrib_1, contrib_2+cost)

    if action=="4": #Raise the full pot
        if is_sb:
            cost=pot_size+(contrib_2-contrib_1) #The amount to call the pot plus the pot size
            return (pot_size+cost, contrib_1+cost, contrib_2)
        else:
            cost=pot_size+(contrib_2-contrib_1) #The amount to call the pot plus the pot size
            return (pot_size+cost, contrib_1, contrib_2+cost)

    if action=="5": #Bet half the pot
        if is_sb:
            cost = int(.5 * pot_size)  # Half of the pot size
            return (pot_size + cost, contrib_1 + cost, contrib_2)
        else:
            cost = int(.5 * pot_size)  # Half of the pot size
            return (pot_size + cost, contrib_1, contrib_2+cost)

    if action=="6": #Bet the full pot
        if is_sb:
            cost = pot_size  # The full pot size
            return (pot_size + cost, contrib_1 + cost, contrib_2)
        else:
            cost = pot_size  # The full pot size
            return (pot_size + cost, contrib_1, contrib_2+cost)

def num_bets(history, is_sb):
    """
    Returns the number of times you have bet/ raised in the current stage of the game.
    """
    reverse_history=history[::-1] #Reverses the history
    i=reverse_history.index("r")
    betting_round=history[len(history)-i:]
    if is_sb:
        total=betting_round.count("3")+betting_round.count("4")+betting_round.count("5")+betting_round.count("6")
    else:
        total=betting_round.count("-3")+betting_round.count("-4")+betting_round.count("-5")+betting_round.count("-6")
    return total

def get_info_set(i_map, history, hole_cards, board_cards, legal_moves, is_sb):
    """Retrieves information set from a dictionary"""
    if is_preflop(history):
        card_buckets=str(bucket_preflop_cards(hole_cards))
    elif is_flop(history):
        card_buckets=str(bucket_preflop_cards(hole_cards))+str(bucket_postflop_cards(hole_cards, board_cards[:3]))
    elif is_river(history):
        card_buckets=str(bucket_preflop_cards(hole_cards))+str(bucket_postflop_cards(hole_cards, board_cards[:3]))+str(bucket_postflop_cards(hole_cards, board_cards[:4]))
    else:
        card_buckets=str(bucket_preflop_cards(hole_cards))+str(bucket_postflop_cards(hole_cards, board_cards[:3]))+str(bucket_postflop_cards(hole_cards, board_cards[:4]))+str(bucket_postflop_cards(hole_cards, board_cards[0:5]))
    key="("+card_buckets+")"+"".join(history)
    info_set=None
    if key not in i_map:
        info_set=InformationSet(key, legal_moves, is_sb)
        i_map[key]=info_set
        return info_set
    return i_map[key]

class InformationSet():
    def __init__(self, key, legal_moves, is_sb):
        self.key = key
        self.legal_moves=legal_moves
        self.is_sb=is_sb
        self.regret_sum = np.zeros(len(action_buckets))
        self.strategy_sum = np.zeros(len(action_buckets))
        self.reach_pr = 0
        self.strategy=np.zeros(len(action_buckets))
        num_actions=legal_moves.count(True)
        for i in range(len(legal_moves)): #Zero's out any non-legal moves
            if legal_moves[i]==True:
                self.strategy[i]=1/float(num_actions)

    def next_strategy(self):
        self.strategy_sum+=self.reach_pr*self.strategy
        self.strategy=self.calc_strategy(self.reach_pr)
        self.reach_pr=0

    def calc_strategy(self, pr):
        """pr is the probability that his information set has been reached"""
        strategy=self.make_positive(self.regret_sum)
        total=sum(strategy)
        if total>0:
            strategy=strategy/float(total)
        else:
            num_actions = self.legal_moves.count(True)
            for i in range(len(self.legal_moves)):  # Zero's out any non-legal moves
                if self.legal_moves[i] == True:
                    strategy[i] = 1 / float(num_actions)
        return strategy

    def get_average_strategy(self):
        """Calculates the average strategy over all iterations. Nash equilibrium strategy"""
        total=float(sum(self.strategy_sum))
        if total > 0:
            strategy = self.strategy_sum / total
            strategy = np.where(strategy < 0.001, 0, strategy) #Purify
            total = sum(strategy) #Re-normalize
            strategy /= total
            return strategy
        num_actions = self.legal_moves.count(True)
        strategy=np.zeros(len(action_buckets))
        for i in range(len(action_buckets)):  # Zero's out any non-legal moves
            if self.legal_moves[i] == True:
                strategy[i] = 1 / float(num_actions)
        return strategy

    def make_positive(self, regret_sum):
        return np.where(regret_sum>0, regret_sum, 0)

    def __str__(self):
        strategies = ['{:03.2f}'.format(i) for i in self.get_average_strategy()]
        return '{} {}'.format(self.key.ljust(6), strategies)

def save_imap(i_map):
    """Saves the i_map as keys mapped to strategy arrays."""
    strategies={}
    for i in i_map:
        strategy=i_map[i].get_average_strategy()
        strategies[i]=strategy.tolist()
    filename = "game_strategies"
    file = bz2.BZ2File(filename, "wb")
    pickle.dump(strategies, file)
    file.close()
    return ("Save complete")

def save_results(i_map):
    """Saves the i_map as keys mapped to InformationSet objects. Used if the program stops running during training and we need a backup of the last iteration"""
    filename="game_strategies2"
    file=bz2.BZ2File(filename, "wb")
    pickle.dump(i_map, file)
    file.close()
    return("Save complete")

def display_results(expected_value, i_map):
    print("Player one is the small blind and player 2 is the big blind")
    print("Player one expected value: {}".format(expected_value))
    print("Player two expected value: {}".format(-1*expected_value))
    print("")
    print("Player one strategies: ")
    sorted_items = sorted(i_map.items(), key=lambda x: x[0])
    for i in sorted_items:
        if i[1].is_sb:
            print(i[1])
    print("")
    print("Player two strategies: ")
    sorted_items = sorted(i_map.items(), key=lambda x: x[0])
    for i in sorted_items:
        if not i[1].is_sb:
            print(i[1])

if __name__=="__main__":
    main()
